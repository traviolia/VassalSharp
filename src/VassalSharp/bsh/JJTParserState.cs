/* Generated By:JJTree: Do not edit this line. src/bsh/JJTParserState.java */
using System;
namespace bsh
{
	
	//UPGRADE_NOTE: The access modifier for this class or class field has been changed in order to prevent compilation errors due to the visibility level. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1296'"
	public class JJTParserState
	{
		private System.Collections.ArrayList nodes;
		private System.Collections.ArrayList marks;
		
		private int sp; // number of nodes on stack
		private int mk; // current mark
		private bool node_created;
		
		internal JJTParserState()
		{
			nodes = new System.Collections.ArrayList();
			marks = new System.Collections.ArrayList();
			sp = 0;
			mk = 0;
		}
		
		/* Determines whether the current node was actually closed and
		pushed.  This should only be called in the final user action of a
		node scope.  */
		internal virtual bool nodeCreated()
		{
			return node_created;
		}
		
		/* Call this to reinitialize the node stack.  It is called
		automatically by the parser's ReInit() method. */
		internal virtual void  reset()
		{
			nodes.Clear();
			marks.Clear();
			sp = 0;
			mk = 0;
		}
		
		/* Returns the root node of the AST.  It only makes sense to call
		this after a successful parse. */
		internal virtual Node rootNode()
		{
			return (Node) nodes[0];
		}
		
		/* Pushes a node on to the stack. */
		internal virtual void  pushNode(Node n)
		{
			nodes.Add(n);
			++sp;
		}
		
		/* Returns the node on the top of the stack, and remove it from the
		stack.  */
		internal virtual Node popNode()
		{
			if (--sp < mk)
			{
				mk = ((System.Int32) SupportClass.StackSupport.Pop(marks));
			}
			return (Node) SupportClass.StackSupport.Pop(nodes);
		}
		
		/* Returns the node currently on the top of the stack. */
		internal virtual Node peekNode()
		{
			return (Node) nodes[nodes.Count - 1];
		}
		
		/* Returns the number of children on the stack in the current node
		scope. */
		internal virtual int nodeArity()
		{
			return sp - mk;
		}
		
		
		internal virtual void  clearNodeScope(Node n)
		{
			while (sp > mk)
			{
				popNode();
			}
			mk = ((System.Int32) SupportClass.StackSupport.Pop(marks));
		}
		
		
		internal virtual void  openNodeScope(Node n)
		{
			marks.Add(Integer.valueOf(mk));
			mk = sp;
			n.jjtOpen();
		}
		
		
		/* A definite node is constructed from a specified number of
		children.  That number of nodes are popped from the stack and
		made the children of the definite node.  Then the definite node
		is pushed on to the stack. */
		internal virtual void  closeNodeScope(Node n, int num)
		{
			mk = ((System.Int32) SupportClass.StackSupport.Pop(marks));
			while (num-- > 0)
			{
				Node c = popNode();
				c.jjtSetParent(n);
				n.jjtAddChild(c, num);
			}
			n.jjtClose();
			pushNode(n);
			node_created = true;
		}
		
		
		/* A conditional node is constructed if its condition is true.  All
		the nodes that have been pushed since the node was opened are
		made children of the the conditional node, which is then pushed
		on to the stack.  If the condition is false the node is not
		constructed and they are left on the stack. */
		internal virtual void  closeNodeScope(Node n, bool condition)
		{
			if (condition)
			{
				int a = nodeArity();
				mk = ((System.Int32) SupportClass.StackSupport.Pop(marks));
				while (a-- > 0)
				{
					Node c = popNode();
					c.jjtSetParent(n);
					n.jjtAddChild(c, a);
				}
				n.jjtClose();
				pushNode(n);
				node_created = true;
			}
			else
			{
				mk = ((System.Int32) SupportClass.StackSupport.Pop(marks));
				node_created = false;
			}
		}
	}
}