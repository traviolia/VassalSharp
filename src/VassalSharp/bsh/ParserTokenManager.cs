/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
using System;
namespace bsh
{
	
	/// <summary>Token Manager. </summary>
	public class ParserTokenManager : ParserConstants
	{
		private void  InitBlock()
		{
			//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.PrintStream' and 'System.IO.StreamWriter' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
			System.IO.StreamWriter temp_writer;
			temp_writer = new System.IO.StreamWriter(System.Console.OpenStandardOutput(), System.Console.Out.Encoding);
			temp_writer.AutoFlush = true;
			debugStream = temp_writer;
		}
		/// <summary>Set debug output. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.PrintStream' and 'System.IO.StreamWriter' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		virtual public System.IO.StreamWriter DebugStream
		{
			set
			{
				debugStream = value;
			}
			
		}
		/// <summary>Get the next Token. </summary>
		virtual public Token NextToken
		{
			get
			{
				Token specialToken = null;
				Token matchedToken;
				int curPos = 0;
				
				//UPGRADE_NOTE: Label 'EOFLoop' was moved. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1014'"
				for (; ; )
				{
					try
					{
						curChar = input_stream.BeginToken();
					}
					catch (System.IO.IOException e)
					{
						jjmatchedKind = 0;
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						return matchedToken;
					}
					
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					if (jjmatchedKind != 0x7fffffff)
					{
						if (jjmatchedPos + 1 < curPos)
							input_stream.backup(curPos - jjmatchedPos - 1);
						if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 63))) != 0L)
						{
							matchedToken = jjFillToken();
							matchedToken.specialToken = specialToken;
							return matchedToken;
						}
						else
						{
							if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 63))) != 0L)
							{
								matchedToken = jjFillToken();
								if (specialToken == null)
									specialToken = matchedToken;
								else
								{
									matchedToken.specialToken = specialToken;
									specialToken = (specialToken.next = matchedToken);
								}
							}
							//UPGRADE_NOTE: Labeled continue statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1015'"
							goto EOFLoop;
						}
					}
					int error_line = input_stream.EndLine;
					int error_column = input_stream.EndColumn;
					System.String error_after = null;
					bool EOFSeen = false;
					try
					{
						input_stream.readChar(); input_stream.backup(1);
					}
					catch (System.IO.IOException e1)
					{
						EOFSeen = true;
						error_after = curPos <= 1?"":input_stream.GetImage();
						if (curChar == '\n' || curChar == '\r')
						{
							error_line++;
							error_column = 0;
						}
						else
							error_column++;
					}
					if (!EOFSeen)
					{
						input_stream.backup(1);
						error_after = curPos <= 1?"":input_stream.GetImage();
					}
					throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
					//UPGRADE_NOTE: Label 'EOFLoop' was moved. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1014'"
EOFLoop: ;
				}
			}
			
		}
		
		/// <summary>Debug output. </summary>
		//UPGRADE_NOTE: The initialization of  'debugStream' was moved to method 'InitBlock'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1005'"
		public System.IO.StreamWriter debugStream;
		private int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
		{
			switch (pos)
			{
				
				case 0: 
					if ((active0 & 0x3eL) != 0L)
						return 0;
					if ((active1 & 0x20000L) != 0L)
						return 11;
					if ((active1 & 0x1000100000000000L) != 0L)
						return 65;
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					if ((active0 & unchecked((int) 0xffffffffffffc00L)) != 0L)
					{
						jjmatchedKind = 70;
						return 44;
					}
					return - 1;
				
				case 1: 
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					if ((active0 & unchecked((int) 0xffffffeff9ffc00L)) != 0L)
					{
						if (jjmatchedPos != 1)
						{
							jjmatchedKind = 70;
							jjmatchedPos = 1;
						}
						return 44;
					}
					if ((active0 & 0x100600000L) != 0L)
						return 44;
					return - 1;
				
				case 2: 
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					if ((active0 & unchecked((int) 0xefffecebfdffc00L)) != 0L)
					{
						if (jjmatchedPos != 2)
						{
							jjmatchedKind = 70;
							jjmatchedPos = 2;
						}
						return 44;
					}
					if ((active0 & 0x100013040000000L) != 0L)
						return 44;
					return - 1;
				
				case 3: 
					if ((active0 & 0x28002408182c000L) != 0L)
						return 44;
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					if ((active0 & unchecked((int) 0xc7ffcae3e5d3c00L)) != 0L)
					{
						if (jjmatchedPos != 3)
						{
							jjmatchedKind = 70;
							jjmatchedPos = 3;
						}
						return 44;
					}
					return - 1;
				
				case 4: 
					if ((active0 & 0x41f7cae02580c00L) != 0L)
					{
						if (jjmatchedPos != 4)
						{
							jjmatchedKind = 70;
							jjmatchedPos = 4;
						}
						return 44;
					}
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					if ((active0 & unchecked((int) 0x86080003c053000L)) != 0L)
						return 44;
					return - 1;
				
				case 5: 
					if ((active0 & 0x41a1c2a12180c00L) != 0L)
					{
						jjmatchedKind = 70;
						jjmatchedPos = 5;
						return 44;
					}
					if ((active0 & 0x45608400400000L) != 0L)
						return 44;
					return - 1;
				
				case 6: 
					if ((active0 & 0x41a102a00080400L) != 0L)
					{
						jjmatchedKind = 70;
						jjmatchedPos = 6;
						return 44;
					}
					if ((active0 & unchecked((int) 0xc0012100800L)) != 0L)
						return 44;
					return - 1;
				
				case 7: 
					if ((active0 & 0x18102a00000000L) != 0L)
					{
						jjmatchedKind = 70;
						jjmatchedPos = 7;
						return 44;
					}
					if ((active0 & 0x402000000080400L) != 0L)
						return 44;
					return - 1;
				
				case 8: 
					if ((active0 & unchecked((int) 0x8000a00000000L)) != 0L)
					{
						jjmatchedKind = 70;
						jjmatchedPos = 8;
						return 44;
					}
					if ((active0 & 0x10102000000000L) != 0L)
						return 44;
					return - 1;
				
				case 9: 
					if ((active0 & unchecked((int) 0x8000000000000L)) != 0L)
					{
						jjmatchedKind = 70;
						jjmatchedPos = 9;
						return 44;
					}
					if ((active0 & unchecked((int) 0xa00000000L)) != 0L)
						return 44;
					return - 1;
				
				case 10: 
					if ((active0 & unchecked((int) 0x8000000000000L)) != 0L)
					{
						if (jjmatchedPos != 10)
						{
							jjmatchedKind = 70;
							jjmatchedPos = 10;
						}
						return 44;
					}
					return - 1;
				
				case 11: 
					if ((active0 & unchecked((int) 0x8000000000000L)) != 0L)
						return 44;
					return - 1;
				
				default: 
					return - 1;
				
			}
		}
		private int jjStartNfa_0(int pos, long active0, long active1, long active2)
		{
			return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
		}
		private int jjStopAtPos(int pos, int kind)
		{
			jjmatchedKind = kind;
			jjmatchedPos = pos;
			return pos + 1;
		}
		private int jjMoveStringLiteralDfa0_0()
		{
			switch (curChar)
			{
				
				case (char) (9): 
					return jjStartNfaWithStates_0(0, 2, 0);
				
				case (char) (10): 
					return jjStartNfaWithStates_0(0, 5, 0);
				
				case (char) (12): 
					return jjStartNfaWithStates_0(0, 4, 0);
				
				case (char) (13): 
					return jjStartNfaWithStates_0(0, 3, 0);
				
				case (char) (32): 
					return jjStartNfaWithStates_0(0, 1, 0);
				
				case (char) (33): 
					jjmatchedKind = 87;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x500000000L, 0x0L);
				
				case (char) (37): 
					jjmatchedKind = 114;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
				
				case (char) (38): 
					jjmatchedKind = 109;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x2000002000000000L, 0x0L);
				
				case (char) (40): 
					return jjStopAtPos(0, 73);
				
				case (char) (41): 
					return jjStopAtPos(0, 74);
				
				case (char) (42): 
					jjmatchedKind = 107;
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
				
				case (char) (43): 
					jjmatchedKind = 105;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x200008000000000L, 0x0L);
				
				case (char) (44): 
					return jjStopAtPos(0, 80);
				
				case (char) (45): 
					jjmatchedKind = 106;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x400010000000000L, 0x0L);
				
				case (char) (46): 
					return jjStartNfaWithStates_0(0, 81, 11);
				
				case (char) (47): 
					jjmatchedKind = 108;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
				
				case (char) (58): 
					return jjStopAtPos(0, 90);
				
				case (char) (59): 
					return jjStopAtPos(0, 79);
				
				case (char) (60): 
					jjmatchedKind = 85;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x8000010000000L, 0x8L);
				
				case (char) (61): 
					jjmatchedKind = 82;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x208000000L, 0x0L);
				
				case (char) (62): 
					jjmatchedKind = 83;
					return jjMoveStringLiteralDfa1_0(0x0L, 0xa0000040000000L, 0xa0L);
				
				case (char) (63): 
					return jjStopAtPos(0, 89);
				
				case (char) (64): 
					return jjMoveStringLiteralDfa1_0(0x0L, 0x41514050a0500000L, 0x151L);
				
				case (char) (91): 
					return jjStopAtPos(0, 77);
				
				case (char) (93): 
					return jjStopAtPos(0, 78);
				
				case (char) (94): 
					jjmatchedKind = 113;
					return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa1_0(0x400L, 0x0L, 0x0L);
				
				case (char) (98): 
					return jjMoveStringLiteralDfa1_0(0x5800L, 0x0L, 0x0L);
				
				case (char) (99): 
					return jjMoveStringLiteralDfa1_0(0xfa000L, 0x0L, 0x0L);
				
				case (char) (100): 
					return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L, 0x0L);
				
				case (char) (101): 
					return jjMoveStringLiteralDfa1_0(0x3800000L, 0x0L, 0x0L);
				
				case (char) (102): 
					return jjMoveStringLiteralDfa1_0(0x7c000000L, 0x0L, 0x0L);
				
				case (char) (103): 
					return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa1_0(0x3f00000000L, 0x0L, 0x0L);
				
				case (char) (108): 
					return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L, 0x0L);
				
				case (char) (112): 
					return jjMoveStringLiteralDfa1_0(0x3c0000000000L, 0x0L, 0x0L);
				
				case (char) (114): 
					return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L, 0x0L);
				
				case (char) (116): 
					return jjMoveStringLiteralDfa1_0(0x1f0000000000000L, 0x0L, 0x0L);
				
				case (char) (118): 
					return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L, 0x0L);
				
				case (char) (119): 
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
				
				case (char) (123): 
					return jjStopAtPos(0, 75);
				
				case (char) (124): 
					jjmatchedKind = 111;
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000800000000L, 0x0L);
				
				case (char) (125): 
					return jjStopAtPos(0, 76);
				
				case (char) (126): 
					return jjStopAtPos(0, 88);
				
				default: 
					return jjMoveNfa_0(6, 0);
				
			}
		}
		private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
		{
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(0, active0, active1, active2);
				return 1;
			}
			switch (curChar)
			{
				
				case (char) (38): 
					if ((active1 & 0x2000000000L) != 0L)
						return jjStopAtPos(1, 101);
					break;
				
				case (char) (43): 
					if ((active1 & unchecked((int) 0x8000000000L)) != 0L)
						return jjStopAtPos(1, 103);
					break;
				
				case (char) (45): 
					if ((active1 & 0x10000000000L) != 0L)
						return jjStopAtPos(1, 104);
					break;
				
				case (char) (60): 
					if ((active1 & unchecked((int) 0x8000000000000L)) != 0L)
					{
						jjmatchedKind = 115;
						jjmatchedPos = 1;
					}
					return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L);
				
				case (char) (61): 
					if ((active1 & unchecked((int) 0x8000000L)) != 0L)
						return jjStopAtPos(1, 91);
					else if ((active1 & 0x10000000L) != 0L)
						return jjStopAtPos(1, 92);
					else if ((active1 & 0x40000000L) != 0L)
						return jjStopAtPos(1, 94);
					else if ((active1 & 0x100000000L) != 0L)
						return jjStopAtPos(1, 96);
					else if ((active1 & 0x200000000000000L) != 0L)
						return jjStopAtPos(1, 121);
					else if ((active1 & 0x400000000000000L) != 0L)
						return jjStopAtPos(1, 122);
					else
					{
						//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
						if ((active1 & unchecked((int) 0x800000000000000L)) != 0L)
							return jjStopAtPos(1, 123);
						else if ((active1 & 0x1000000000000000L) != 0L)
							return jjStopAtPos(1, 124);
						else if ((active1 & 0x2000000000000000L) != 0L)
							return jjStopAtPos(1, 125);
						else
						{
							//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
							if ((active1 & unchecked((int) 0x8000000000000000L)) != 0L)
								return jjStopAtPos(1, 127);
							else if ((active2 & 0x2L) != 0L)
								return jjStopAtPos(1, 129);
							else if ((active2 & 0x4L) != 0L)
								return jjStopAtPos(1, 130);
						}
					}
					break;
				
				case (char) (62): 
					if ((active1 & 0x20000000000000L) != 0L)
					{
						jjmatchedKind = 117;
						jjmatchedPos = 1;
					}
					return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0xa0L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa2_0(active0, 0x48004018000L, active1, 0x4000004000000000L, active2, 0L);
				
				case (char) (98): 
					return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x1400000000000L, active2, 0L);
				
				case (char) (101): 
					return jjMoveStringLiteralDfa2_0(active0, 0x410000100000L, active1, 0L, active2, 0L);
				
				case (char) (102): 
					if ((active0 & 0x100000000L) != 0L)
						return jjStartNfaWithStates_0(1, 32, 44);
					break;
				
				case (char) (103): 
					return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80100000L, active2, 0L);
				
				case (char) (104): 
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa2_0(active0, 0x860800000020000L, active1, 0L, active2, 0L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L, active2, 0L);
				
				case (char) (108): 
					return jjMoveStringLiteralDfa2_0(active0, 0x20802000L, active1, 0x10000020400000L, active2, 0x10L);
				
				case (char) (109): 
					return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0L, active2, 0L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa2_0(active0, 0x3801000000L, active1, 0L, active2, 0L);
				
				case (char) (111): 
					if ((active0 & 0x200000L) != 0L)
					{
						jjmatchedKind = 21;
						jjmatchedPos = 1;
					}
					return jjMoveStringLiteralDfa2_0(active0, 0x6000040c04c0800L, active1, 0x1000000000L, active2, 0x1L);
				
				case (char) (114): 
					return jjMoveStringLiteralDfa2_0(active0, 0x190180000001000L, active1, 0x140000000000000L, active2, 0x140L);
				
				case (char) (116): 
					return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0L, active2, 0L);
				
				case (char) (117): 
					return jjMoveStringLiteralDfa2_0(active0, 0x220000000000L, active1, 0L, active2, 0L);
				
				case (char) (119): 
					return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
				
				case (char) (120): 
					return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
				
				case (char) (121): 
					return jjMoveStringLiteralDfa2_0(active0, 0x8000000004000L, active1, 0L, active2, 0L);
				
				case (char) (124): 
					if ((active1 & unchecked((int) 0x800000000L)) != 0L)
						return jjStopAtPos(1, 99);
					break;
				
				case (char) (126): 
					if ((active1 & 0x200000000L) != 0L)
						return jjStopAtPos(1, 97);
					else if ((active1 & 0x400000000L) != 0L)
						return jjStopAtPos(1, 98);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(0, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(0, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(1, active0, active1, active2);
				return 2;
			}
			switch (curChar)
			{
				
				case (char) (61): 
					if ((active2 & 0x8L) != 0L)
						return jjStopAtPos(2, 131);
					else if ((active2 & 0x20L) != 0L)
						return jjStopAtPos(2, 133);
					break;
				
				case (char) (62): 
					if ((active1 & unchecked((int) 0x80000000000000L)) != 0L)
					{
						jjmatchedKind = 119;
						jjmatchedPos = 2;
					}
					return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa3_0(active0, 0x11000000022000L, active1, 0L, active2, 0L);
				
				case (char) (98): 
					return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
				
				case (char) (99): 
					return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
				
				case (char) (101): 
					return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (102): 
					return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L);
				
				case (char) (105): 
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa3_0(active0, 0xa04080000000000L, active1, 0x141400000000000L, active2, 0x140L);
				
				case (char) (108): 
					return jjMoveStringLiteralDfa3_0(active0, 0x400020004000000L, active1, 0L, active2, 0L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa3_0(active0, 0x80040180c0000L, active1, 0x4000004000000000L, active2, 0L);
				
				case (char) (111): 
					return jjMoveStringLiteralDfa3_0(active0, 0x900020000800L, active1, 0L, active2, 0L);
				
				case (char) (112): 
					return jjMoveStringLiteralDfa3_0(active0, 0x600000000L, active1, 0L, active2, 0L);
				
				case (char) (114): 
					if ((active0 & 0x40000000L) != 0L)
						return jjStartNfaWithStates_0(2, 30, 44);
					else if ((active1 & 0x1000000000L) != 0L)
					{
						jjmatchedKind = 100;
						jjmatchedPos = 2;
					}
					return jjMoveStringLiteralDfa3_0(active0, 0x62000000000000L, active1, 0L, active2, 0x1L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa3_0(active0, 0x800808400L, active1, 0L, active2, 0L);
				
				case (char) (116): 
					if ((active0 & 0x1000000000L) != 0L)
					{
						jjmatchedKind = 36;
						jjmatchedPos = 2;
					}
					else if ((active1 & 0x100000L) != 0L)
					{
						jjmatchedKind = 84;
						jjmatchedPos = 2;
					}
					else if ((active1 & 0x400000L) != 0L)
					{
						jjmatchedKind = 86;
						jjmatchedPos = 2;
					}
					return jjMoveStringLiteralDfa3_0(active0, 0x40a082014000L, active1, 0xa0000000L, active2, 0L);
				
				case (char) (117): 
					return jjMoveStringLiteralDfa3_0(active0, 0x80000001400000L, active1, 0L, active2, 0L);
				
				case (char) (119): 
					if ((active0 & 0x10000000000L) != 0L)
						return jjStartNfaWithStates_0(2, 40, 44);
					break;
				
				case (char) (121): 
					if ((active0 & 0x100000000000000L) != 0L)
						return jjStartNfaWithStates_0(2, 56, 44);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(1, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(1, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(2, active0, active1, active2);
				return 3;
			}
			switch (curChar)
			{
				
				case (char) (61): 
					if ((active2 & 0x80L) != 0L)
						return jjStopAtPos(3, 135);
					break;
				
				case (char) (95): 
					return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa4_0(active0, 0x400000038101000L, active1, 0L, active2, 0L);
				
				case (char) (98): 
					return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L, active2, 0L);
				
				case (char) (99): 
					return jjMoveStringLiteralDfa4_0(active0, 0x8000000010000L, active1, 0L, active2, 0L);
				
				case (char) (100): 
					if ((active0 & 0x200000000000000L) != 0L)
						return jjStartNfaWithStates_0(3, 57, 44);
					else if ((active1 & 0x4000000000L) != 0L)
					{
						jjmatchedKind = 102;
						jjmatchedPos = 3;
					}
					return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
				
				case (char) (101): 
					if ((active0 & 0x4000L) != 0L)
						return jjStartNfaWithStates_0(3, 14, 44);
					else if ((active0 & 0x8000L) != 0L)
						return jjStartNfaWithStates_0(3, 15, 44);
					else if ((active0 & 0x800000L) != 0L)
						return jjStartNfaWithStates_0(3, 23, 44);
					else if ((active0 & unchecked((int) 0x80000000000000L)) != 0L)
						return jjStartNfaWithStates_0(3, 55, 44);
					return jjMoveStringLiteralDfa4_0(active0, 0x2002000000L, active1, 0xa0000000L, active2, 0L);
				
				case (char) (102): 
					return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (103): 
					if ((active0 & 0x4000000000L) != 0L)
						return jjStartNfaWithStates_0(3, 38, 44);
					return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x140000000000000L, active2, 0x140L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000L, active1, 0L, active2, 0L);
				
				case (char) (107): 
					return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
				
				case (char) (108): 
					if ((active0 & 0x20000000000L) != 0L)
						return jjStartNfaWithStates_0(3, 41, 44);
					//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
					return jjMoveStringLiteralDfa4_0(active0, 0x800200200000800L, active1, 0L, active2, 0L);
				
				case (char) (109): 
					if ((active0 & 0x1000000L) != 0L)
						return jjStartNfaWithStates_0(3, 24, 44);
					break;
				
				case (char) (110): 
					return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
				
				case (char) (111): 
					if ((active0 & unchecked((int) 0x80000000L)) != 0L)
						return jjStartNfaWithStates_0(3, 31, 44);
					return jjMoveStringLiteralDfa4_0(active0, 0x60000400000000L, active1, 0L, active2, 0L);
				
				case (char) (114): 
					if ((active0 & 0x20000L) != 0L)
						return jjStartNfaWithStates_0(3, 17, 44);
					return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa4_0(active0, 0x4042000L, active1, 0L, active2, 0L);
				
				case (char) (116): 
					return jjMoveStringLiteralDfa4_0(active0, 0x5100800080400L, active1, 0x1400000000000L, active2, 0L);
				
				case (char) (117): 
					return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
				
				case (char) (118): 
					return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(2, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(2, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(3, active0, active1, active2);
				return 4;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa5_0(active0, 0xc0800000000L, active1, 0L, active2, 0x1L);
				
				case (char) (99): 
					return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000L, active1, 0L, active2, 0L);
				
				case (char) (101): 
					if ((active0 & 0x4000000L) != 0L)
						return jjStartNfaWithStates_0(4, 26, 44);
					else
					{
						//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
						if ((active0 & unchecked((int) 0x800000000000000L)) != 0L)
							return jjStartNfaWithStates_0(4, 59, 44);
					}
					return jjMoveStringLiteralDfa5_0(active0, 0x100200000800L, active1, 0L, active2, 0L);
				
				case (char) (104): 
					if ((active0 & 0x10000L) != 0L)
						return jjStartNfaWithStates_0(4, 16, 44);
					return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x140000000000000L, active2, 0x140L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa5_0(active0, 0x1200000080000L, active1, 0L, active2, 0L);
				
				case (char) (107): 
					if ((active0 & 0x1000L) != 0L)
						return jjStartNfaWithStates_0(4, 12, 44);
					break;
				
				case (char) (108): 
					if ((active0 & unchecked((int) 0x8000000L)) != 0L)
					{
						jjmatchedKind = 27;
						jjmatchedPos = 4;
					}
					return jjMoveStringLiteralDfa5_0(active0, 0x10400000L, active1, 0L, active2, 0L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L, active2, 0L);
				
				case (char) (113): 
					if ((active1 & 0x20000000L) != 0L)
						return jjStopAtPos(4, 93);
					else if ((active1 & unchecked((int) 0x80000000L)) != 0L)
						return jjStopAtPos(4, 95);
					break;
				
				case (char) (114): 
					return jjMoveStringLiteralDfa5_0(active0, 0x402400000400L, active1, 0L, active2, 0L);
				
				case (char) (115): 
					if ((active0 & 0x2000L) != 0L)
						return jjStartNfaWithStates_0(4, 13, 44);
					return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
				
				case (char) (116): 
					if ((active0 & 0x40000L) != 0L)
						return jjStartNfaWithStates_0(4, 18, 44);
					else if ((active0 & 0x20000000L) != 0L)
						return jjStartNfaWithStates_0(4, 29, 44);
					else if ((active0 & unchecked((int) 0x800000000000L)) != 0L)
						return jjStartNfaWithStates_0(4, 47, 44);
					return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (117): 
					return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L);
				
				case (char) (118): 
					return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
				
				case (char) (119): 
					if ((active0 & 0x20000000000000L) != 0L)
					{
						jjmatchedKind = 53;
						jjmatchedPos = 4;
					}
					return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x1400000000000L, active2, 0L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(3, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(3, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(4, active0, active1, active2);
				return 5;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa6_0(active0, 0xc00L, active1, 0x4000000000000000L, active2, 0L);
				
				case (char) (99): 
					if ((active0 & 0x200000000000L) != 0L)
						return jjStartNfaWithStates_0(5, 45, 44);
					else if ((active0 & 0x1000000000000L) != 0L)
						return jjStartNfaWithStates_0(5, 48, 44);
					return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
				
				case (char) (100): 
					return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L, active2, 0L);
				
				case (char) (101): 
					if ((active0 & 0x400000L) != 0L)
						return jjStartNfaWithStates_0(5, 22, 44);
					else if ((active0 & unchecked((int) 0x8000000000L)) != 0L)
						return jjStartNfaWithStates_0(5, 39, 44);
					break;
				
				case (char) (102): 
					return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
				
				case (char) (103): 
					return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
				
				case (char) (104): 
					if ((active0 & 0x4000000000000L) != 0L)
						return jjStartNfaWithStates_0(5, 50, 44);
					break;
				
				case (char) (105): 
					return jjMoveStringLiteralDfa6_0(active0, 0x410000000000000L, active1, 0x1400000000000L, active2, 0L);
				
				case (char) (108): 
					return jjMoveStringLiteralDfa6_0(active0, 0x10100000L, active1, 0L, active2, 0L);
				
				case (char) (109): 
					return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active2, 0L);
				
				case (char) (110): 
					if ((active0 & 0x400000000000L) != 0L)
						return jjStartNfaWithStates_0(5, 46, 44);
					return jjMoveStringLiteralDfa6_0(active0, 0x800080000L, active1, 0L, active2, 0L);
				
				case (char) (114): 
					return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
				
				case (char) (115): 
					if ((active0 & 0x40000000000000L) != 0L)
						return jjStartNfaWithStates_0(5, 54, 44);
					return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L);
				
				case (char) (116): 
					if ((active0 & 0x400000000L) != 0L)
						return jjStartNfaWithStates_0(5, 34, 44);
					return jjMoveStringLiteralDfa6_0(active0, 0x2080000000000L, active1, 0x140000000000000L, active2, 0x140L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(4, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(4, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(5, active0, active1, active2);
				return 6;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x140000000000000L, active2, 0x140L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
				
				case (char) (99): 
					return jjMoveStringLiteralDfa7_0(active0, 0x800000400L, active1, 0L, active2, 0L);
				
				case (char) (101): 
					if ((active0 & 0x40000000000L) != 0L)
						return jjStartNfaWithStates_0(6, 42, 44);
					else if ((active0 & unchecked((int) 0x80000000000L)) != 0L)
						return jjStartNfaWithStates_0(6, 43, 44);
					return jjMoveStringLiteralDfa7_0(active0, 0x10000200000000L, active1, 0L, active2, 0L);
				
				case (char) (102): 
					return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
				
				case (char) (108): 
					return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
				
				case (char) (110): 
					if ((active0 & 0x800L) != 0L)
						return jjStartNfaWithStates_0(6, 11, 44);
					break;
				
				case (char) (111): 
					return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
				
				case (char) (115): 
					if ((active0 & 0x2000000L) != 0L)
						return jjStartNfaWithStates_0(6, 25, 44);
					return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4011400000000000L, active2, 0x11L);
				
				case (char) (116): 
					if ((active0 & 0x100000L) != 0L)
						return jjStartNfaWithStates_0(6, 20, 44);
					return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
				
				case (char) (117): 
					return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L, active2, 0L);
				
				case (char) (121): 
					if ((active0 & 0x10000000L) != 0L)
						return jjStartNfaWithStates_0(6, 28, 44);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(5, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(5, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(6, active0, active1, active2);
				return 7;
			}
			switch (curChar)
			{
				
				case (char) (99): 
					return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
				
				case (char) (101): 
					if ((active0 & 0x80000L) != 0L)
						return jjStartNfaWithStates_0(7, 19, 44);
					else if ((active0 & 0x400000000000000L) != 0L)
						return jjStartNfaWithStates_0(7, 58, 44);
					return jjMoveStringLiteralDfa8_0(active0, 0x100800000000L, active1, 0x1400000000000L, active2, 0L);
				
				case (char) (104): 
					return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa8_0(active0, 0x18000200000000L, active1, 0L, active2, 0L);
				
				case (char) (112): 
					if ((active0 & 0x2000000000000L) != 0L)
						return jjStartNfaWithStates_0(7, 49, 44);
					break;
				
				case (char) (115): 
					return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4040000000000000L, active2, 0x40L);
				
				case (char) (116): 
					if ((active0 & 0x400L) != 0L)
						return jjStartNfaWithStates_0(7, 10, 44);
					break;
				
				case (char) (117): 
					return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(6, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(6, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(7, active0, active1, active2);
				return 8;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1400000000000L, active2, 0L);
				
				case (char) (100): 
					if ((active0 & 0x100000000000L) != 0L)
						return jjStartNfaWithStates_0(8, 44, 44);
					break;
				
				case (char) (101): 
					if ((active0 & 0x2000000000L) != 0L)
						return jjStartNfaWithStates_0(8, 37, 44);
					break;
				
				case (char) (103): 
					return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1L);
				
				case (char) (104): 
					return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x4010000000000000L, active2, 0x10L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (111): 
					return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);
				
				case (char) (116): 
					if ((active0 & 0x10000000000000L) != 0L)
						return jjStartNfaWithStates_0(8, 52, 44);
					return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0L, active2, 0L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(7, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(7, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(8, active0, active1, active2);
				return 9;
			}
			switch (curChar)
			{
				
				case (char) (97): 
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
				
				case (char) (102): 
					if ((active0 & unchecked((int) 0x800000000L)) != 0L)
						return jjStartNfaWithStates_0(9, 35, 44);
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10L);
				
				case (char) (103): 
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40L);
				
				case (char) (110): 
					if ((active2 & 0x1L) != 0L)
						return jjStopAtPos(9, 128);
					break;
				
				case (char) (111): 
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
				
				case (char) (115): 
					if ((active0 & 0x200000000L) != 0L)
						return jjStartNfaWithStates_0(9, 33, 44);
					return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (122): 
					return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(8, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(8, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(9, active0, active1, active2);
				return 10;
			}
			switch (curChar)
			{
				
				case (char) (101): 
					return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
				
				case (char) (102): 
					return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000000L, active2, 0x40L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (110): 
					if ((active1 & 0x4000000000000000L) != 0L)
						return jjStopAtPos(10, 126);
					return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
				
				case (char) (114): 
					if ((active1 & 0x1000000000000L) != 0L)
						return jjStopAtPos(10, 112);
					break;
				
				case (char) (116): 
					if ((active1 & 0x10000000000000L) != 0L)
					{
						jjmatchedKind = 116;
						jjmatchedPos = 10;
					}
					return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(9, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(9, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(10, active0, active1, active2);
				return 11;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10L);
				
				case (char) (100): 
					if ((active0 & unchecked((int) 0x8000000000000L)) != 0L)
						return jjStartNfaWithStates_0(11, 51, 44);
					else if ((active1 & 0x400000000000L) != 0L)
						return jjStopAtPos(11, 110);
					break;
				
				case (char) (103): 
					return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (116): 
					if ((active1 & 0x40000000000000L) != 0L)
					{
						jjmatchedKind = 118;
						jjmatchedPos = 11;
					}
					return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x40L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(10, active0, active1, active2);
		}
		private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
		{
			if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(10, old0, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(11, 0L, active1, active2);
				return 12;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x40L);
				
				case (char) (97): 
					return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x10L);
				
				case (char) (110): 
					return jjMoveStringLiteralDfa13_0(active1, 0x100000000000000L, active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(11, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(11, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(12, 0L, active1, active2);
				return 13;
			}
			switch (curChar)
			{
				
				case (char) (97): 
					return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x40L);
				
				case (char) (101): 
					return jjMoveStringLiteralDfa14_0(active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x10L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(12, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(12, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(13, 0L, active1, active2);
				return 14;
			}
			switch (curChar)
			{
				
				case (char) (100): 
					return jjMoveStringLiteralDfa15_0(active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x50L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(13, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(13, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(14, 0L, active1, active2);
				return 15;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa16_0(active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x10L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x40L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(14, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(14, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(15, 0L, active1, active2);
				return 16;
			}
			switch (curChar)
			{
				
				case (char) (103): 
					return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x10L);
				
				case (char) (105): 
					return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x40L);
				
				case (char) (115): 
					return jjMoveStringLiteralDfa17_0(active1, 0x100000000000000L, active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(15, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(15, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(16, 0L, active1, active2);
				return 17;
			}
			switch (curChar)
			{
				
				case (char) (103): 
					return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x40L);
				
				case (char) (104): 
					return jjMoveStringLiteralDfa18_0(active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (110): 
					if ((active2 & 0x10L) != 0L)
						return jjStopAtPos(17, 132);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(16, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(16, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(17, 0L, active1, active2);
				return 18;
			}
			switch (curChar)
			{
				
				case (char) (105): 
					return jjMoveStringLiteralDfa19_0(active1, 0x100000000000000L, active2, 0x100L);
				
				case (char) (110): 
					if ((active2 & 0x40L) != 0L)
						return jjStopAtPos(18, 134);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(17, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(17, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(18, 0L, active1, active2);
				return 19;
			}
			switch (curChar)
			{
				
				case (char) (102): 
					return jjMoveStringLiteralDfa20_0(active1, 0x100000000000000L, active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(18, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(18, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(19, 0L, active1, active2);
				return 20;
			}
			switch (curChar)
			{
				
				case (char) (116): 
					if ((active1 & 0x100000000000000L) != 0L)
					{
						jjmatchedKind = 120;
						jjmatchedPos = 20;
					}
					return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(19, 0L, active1, active2);
		}
		private int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2)
		{
			if (((active1 &= old1) | (active2 &= old2)) == 0L)
				return jjStartNfa_0(19, 0L, old1, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(20, 0L, 0L, active2);
				return 21;
			}
			switch (curChar)
			{
				
				case (char) (95): 
					return jjMoveStringLiteralDfa22_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(20, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa22_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(20, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
				return 22;
			}
			switch (curChar)
			{
				
				case (char) (97): 
					return jjMoveStringLiteralDfa23_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(21, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa23_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(21, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
				return 23;
			}
			switch (curChar)
			{
				
				case (char) (115): 
					return jjMoveStringLiteralDfa24_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(22, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa24_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(22, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
				return 24;
			}
			switch (curChar)
			{
				
				case (char) (115): 
					return jjMoveStringLiteralDfa25_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(23, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa25_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(23, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
				return 25;
			}
			switch (curChar)
			{
				
				case (char) (105): 
					return jjMoveStringLiteralDfa26_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(24, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa26_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(24, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
				return 26;
			}
			switch (curChar)
			{
				
				case (char) (103): 
					return jjMoveStringLiteralDfa27_0(active2, 0x100L);
				
				default: 
					break;
				
			}
			return jjStartNfa_0(25, 0L, 0L, active2);
		}
		private int jjMoveStringLiteralDfa27_0(long old2, long active2)
		{
			if (((active2 &= old2)) == 0L)
				return jjStartNfa_0(25, 0L, 0L, old2);
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				jjStopStringLiteralDfa_0(26, 0L, 0L, active2);
				return 27;
			}
			switch (curChar)
			{
				
				case (char) (110): 
					if ((active2 & 0x100L) != 0L)
						return jjStopAtPos(27, 136);
					break;
				
				default: 
					break;
				
			}
			return jjStartNfa_0(26, 0L, 0L, active2);
		}
		private int jjStartNfaWithStates_0(int pos, int kind, int state)
		{
			jjmatchedKind = kind;
			jjmatchedPos = pos;
			try
			{
				curChar = input_stream.readChar();
			}
			catch (System.IO.IOException e)
			{
				return pos + 1;
			}
			return jjMoveNfa_0(state, pos + 1);
		}
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec0'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec0 = new long[]{0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec1'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec1 = new long[]{0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec3'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec3 = new long[]{0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec4'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec4 = new long[]{0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec5'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec5 = new long[]{0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec6'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec6 = new long[]{0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec7'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjbitVec7 = new long[]{0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjbitVec8'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		internal static readonly long[] jjbitVec8 = new long[]{0x3fffffffffffL, 0x0L, 0x0L, 0x0L};
		private int jjMoveNfa_0(int startState, int curPos)
		{
			int startsAt = 0;
			jjnewStateCnt = 83;
			int i = 1;
			jjstateSet[0] = startState;
			int kind = 0x7fffffff;
			for (; ; )
			{
				if (++jjround == 0x7fffffff)
					ReInitRounds();
				if (curChar < 64)
				{
					long l = 1L << (int) curChar;
					do 
					{
						switch (jjstateSet[--i])
						{
							
							case 65: 
								if (curChar == 42)
									jjstateSet[jjnewStateCnt++] = 76;
								else if (curChar == 47)
								{
									if (kind > 7)
										kind = 7;
									jjCheckNAddStates(0, 2);
								}
								if (curChar == 42)
									jjCheckNAdd(71);
								break;
							
							case 6: 
								if ((0x1ffffffffL & l) != 0L)
								{
									if (kind > 6)
										kind = 6;
									jjCheckNAdd(0);
								}
								else if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddStates(3, 9);
								else if (curChar == 47)
									jjAddStates(10, 12);
								else if (curChar == 36)
								{
									if (kind > 70)
										kind = 70;
									jjCheckNAdd(44);
								}
								else if (curChar == 34)
									jjstateSet[jjnewStateCnt++] = 41;
								else if (curChar == 39)
									jjAddStates(13, 14);
								else if (curChar == 46)
									jjCheckNAdd(11);
								else if (curChar == 35)
									jjstateSet[jjnewStateCnt++] = 1;
								if ((0x3fe000000000000L & l) != 0L)
								{
									if (kind > 60)
										kind = 60;
									jjCheckNAddTwoStates(8, 9);
								}
								else if (curChar == 48)
								{
									if (kind > 60)
										kind = 60;
									jjCheckNAddStates(15, 17);
								}
								else if (curChar == 34)
									jjCheckNAddStates(18, 20);
								break;
							
							case 0: 
								if ((0x1ffffffffL & l) == 0L)
									break;
								if (kind > 6)
									kind = 6;
								jjCheckNAdd(0);
								break;
							
							case 1: 
								if (curChar == 33)
									jjCheckNAddStates(21, 23);
								break;
							
							case 2: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffffffffffffdbffL) & l) != 0L)
									jjCheckNAddStates(21, 23);
								break;
							
							case 3: 
								if ((0x2400L & l) != 0L && kind > 8)
									kind = 8;
								break;
							
							case 4: 
								if (curChar == 10 && kind > 8)
									kind = 8;
								break;
							
							case 5: 
								if (curChar == 13)
									jjstateSet[jjnewStateCnt++] = 4;
								break;
							
							case 7: 
								if ((0x3fe000000000000L & l) == 0L)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddTwoStates(8, 9);
								break;
							
							case 8: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddTwoStates(8, 9);
								break;
							
							case 10: 
								if (curChar == 46)
									jjCheckNAdd(11);
								break;
							
							case 11: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddStates(24, 26);
								break;
							
							case 13: 
								if ((0x280000000000L & l) != 0L)
									jjCheckNAdd(14);
								break;
							
							case 14: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddTwoStates(14, 15);
								break;
							
							case 16: 
								if (curChar == 39)
									jjAddStates(13, 14);
								break;
							
							case 17: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffffff7fffffdbffL) & l) != 0L)
									jjCheckNAdd(18);
								break;
							
							case 18: 
								if (curChar == 39 && kind > 66)
									kind = 66;
								break;
							
							case 20: 
								if ((unchecked((int) 0x8400000000L) & l) != 0L)
									jjCheckNAdd(18);
								break;
							
							case 21: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAddTwoStates(22, 18);
								break;
							
							case 22: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAdd(18);
								break;
							
							case 23: 
								if ((unchecked((int) 0xf000000000000L) & l) != 0L)
									jjstateSet[jjnewStateCnt++] = 24;
								break;
							
							case 24: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAdd(22);
								break;
							
							case 25: 
								if (curChar == 34)
									jjCheckNAddStates(18, 20);
								break;
							
							case 26: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffffbffffdbffL) & l) != 0L)
									jjCheckNAddStates(18, 20);
								break;
							
							case 28: 
								if ((unchecked((int) 0x8400000000L) & l) != 0L)
									jjCheckNAddStates(18, 20);
								break;
							
							case 29: 
								if (curChar == 34 && kind > 67)
									kind = 67;
								break;
							
							case 30: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAddStates(27, 30);
								break;
							
							case 31: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAddStates(18, 20);
								break;
							
							case 32: 
								if ((unchecked((int) 0xf000000000000L) & l) != 0L)
									jjstateSet[jjnewStateCnt++] = 33;
								break;
							
							case 33: 
								if ((unchecked((int) 0xff000000000000L) & l) != 0L)
									jjCheckNAdd(31);
								break;
							
							case 34: 
							case 40: 
								if (curChar == 34)
									jjCheckNAddTwoStates(35, 38);
								break;
							
							case 35: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffffbffffffffL) & l) != 0L)
									jjCheckNAddStates(31, 33);
								break;
							
							case 36: 
								if (curChar == 34 && kind > 68)
									kind = 68;
								break;
							
							case 37: 
								if (curChar == 34)
									jjstateSet[jjnewStateCnt++] = 36;
								break;
							
							case 38: 
								if (curChar == 34)
									jjstateSet[jjnewStateCnt++] = 37;
								break;
							
							case 39: 
								if (curChar == 34)
									jjCheckNAddStates(34, 36);
								break;
							
							case 41: 
								if (curChar == 34)
									jjstateSet[jjnewStateCnt++] = 34;
								break;
							
							case 42: 
								if (curChar == 34)
									jjstateSet[jjnewStateCnt++] = 41;
								break;
							
							case 43: 
								if (curChar != 36)
									break;
								if (kind > 70)
									kind = 70;
								jjCheckNAdd(44);
								break;
							
							case 44: 
								if ((0x3ff001000000000L & l) == 0L)
									break;
								if (kind > 70)
									kind = 70;
								jjCheckNAdd(44);
								break;
							
							case 45: 
								if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddStates(3, 9);
								break;
							
							case 46: 
								if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddTwoStates(46, 47);
								break;
							
							case 47: 
								if (curChar != 46)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddStates(37, 39);
								break;
							
							case 48: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddStates(37, 39);
								break;
							
							case 50: 
								if ((0x280000000000L & l) != 0L)
									jjCheckNAdd(51);
								break;
							
							case 51: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddTwoStates(51, 15);
								break;
							
							case 52: 
								if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddTwoStates(52, 53);
								break;
							
							case 54: 
								if ((0x280000000000L & l) != 0L)
									jjCheckNAdd(55);
								break;
							
							case 55: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 64)
									kind = 64;
								jjCheckNAddTwoStates(55, 15);
								break;
							
							case 56: 
								if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddStates(40, 42);
								break;
							
							case 58: 
								if ((0x280000000000L & l) != 0L)
									jjCheckNAdd(59);
								break;
							
							case 59: 
								if ((0x3ff000000000000L & l) != 0L)
									jjCheckNAddTwoStates(59, 15);
								break;
							
							case 60: 
								if (curChar != 48)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddStates(15, 17);
								break;
							
							case 62: 
								if ((0x3ff000000000000L & l) == 0L)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddTwoStates(62, 9);
								break;
							
							case 63: 
								if ((unchecked((int) 0xff000000000000L) & l) == 0L)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddTwoStates(63, 9);
								break;
							
							case 64: 
								if (curChar == 47)
									jjAddStates(10, 12);
								break;
							
							case 66: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffffffffffffdbffL) & l) == 0L)
									break;
								if (kind > 7)
									kind = 7;
								jjCheckNAddStates(0, 2);
								break;
							
							case 67: 
								if ((0x2400L & l) != 0L && kind > 7)
									kind = 7;
								break;
							
							case 68: 
								if (curChar == 10 && kind > 7)
									kind = 7;
								break;
							
							case 69: 
								if (curChar == 13)
									jjstateSet[jjnewStateCnt++] = 68;
								break;
							
							case 70: 
								if (curChar == 42)
									jjCheckNAdd(71);
								break;
							
							case 71: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffbffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(71, 72);
								break;
							
							case 72: 
								if (curChar == 42)
									jjCheckNAddStates(43, 45);
								break;
							
							case 73: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffff7bffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(74, 72);
								break;
							
							case 74: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffbffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(74, 72);
								break;
							
							case 75: 
								if (curChar == 47 && kind > 9)
									kind = 9;
								break;
							
							case 76: 
								if (curChar == 42)
									jjCheckNAddTwoStates(77, 78);
								break;
							
							case 77: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffbffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(77, 78);
								break;
							
							case 78: 
								if (curChar == 42)
									jjCheckNAddStates(46, 48);
								break;
							
							case 79: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffff7bffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(80, 78);
								break;
							
							case 80: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xfffffbffffffffffL) & l) != 0L)
									jjCheckNAddTwoStates(80, 78);
								break;
							
							case 81: 
								if (curChar == 47 && kind > 69)
									kind = 69;
								break;
							
							case 82: 
								if (curChar == 42)
									jjstateSet[jjnewStateCnt++] = 76;
								break;
							
							default:  break;
							
						}
					}
					while (i != startsAt);
				}
				else if (curChar < 128)
				{
					long l = 1L << (curChar & 63);
					do 
					{
						switch (jjstateSet[--i])
						{
							
							case 6: 
							case 44: 
								if ((0x7fffffe87fffffeL & l) == 0L)
									break;
								if (kind > 70)
									kind = 70;
								jjCheckNAdd(44);
								break;
							
							case 2: 
								jjAddStates(21, 23);
								break;
							
							case 9: 
								if ((0x100000001000L & l) != 0L && kind > 60)
									kind = 60;
								break;
							
							case 12: 
								if ((0x2000000020L & l) != 0L)
									jjAddStates(49, 50);
								break;
							
							case 15: 
								if ((0x5000000050L & l) != 0L && kind > 64)
									kind = 64;
								break;
							
							case 17: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffffffffefffffffL) & l) != 0L)
									jjCheckNAdd(18);
								break;
							
							case 19: 
								if (curChar == 92)
									jjAddStates(51, 53);
								break;
							
							case 20: 
								if ((0x14404410000000L & l) != 0L)
									jjCheckNAdd(18);
								break;
							
							case 26: 
								//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
								if ((unchecked((int) 0xffffffffefffffffL) & l) != 0L)
									jjCheckNAddStates(18, 20);
								break;
							
							case 27: 
								if (curChar == 92)
									jjAddStates(54, 56);
								break;
							
							case 28: 
								if ((0x14404410000000L & l) != 0L)
									jjCheckNAddStates(18, 20);
								break;
							
							case 35: 
								jjAddStates(31, 33);
								break;
							
							case 49: 
								if ((0x2000000020L & l) != 0L)
									jjAddStates(57, 58);
								break;
							
							case 53: 
								if ((0x2000000020L & l) != 0L)
									jjAddStates(59, 60);
								break;
							
							case 57: 
								if ((0x2000000020L & l) != 0L)
									jjAddStates(61, 62);
								break;
							
							case 61: 
								if ((0x100000001000000L & l) != 0L)
									jjCheckNAdd(62);
								break;
							
							case 62: 
								if ((0x7e0000007eL & l) == 0L)
									break;
								if (kind > 60)
									kind = 60;
								jjCheckNAddTwoStates(62, 9);
								break;
							
							case 66: 
								if (kind > 7)
									kind = 7;
								jjAddStates(0, 2);
								break;
							
							case 71: 
								jjCheckNAddTwoStates(71, 72);
								break;
							
							case 73: 
							case 74: 
								jjCheckNAddTwoStates(74, 72);
								break;
							
							case 77: 
								jjCheckNAddTwoStates(77, 78);
								break;
							
							case 79: 
							case 80: 
								jjCheckNAddTwoStates(80, 78);
								break;
							
							default:  break;
							
						}
					}
					while (i != startsAt);
				}
				else
				{
					int hiByte = (int) (curChar >> 8);
					int i1 = hiByte >> 6;
					long l1 = 1L << (hiByte & 63);
					int i2 = (curChar & 0xff) >> 6;
					long l2 = 1L << (curChar & 63);
					do 
					{
						switch (jjstateSet[--i])
						{
							
							case 6: 
								if (jjCanMove_0(hiByte, i1, i2, l1, l2))
								{
									if (kind > 6)
										kind = 6;
									jjCheckNAdd(0);
								}
								if (jjCanMove_2(hiByte, i1, i2, l1, l2))
								{
									if (kind > 70)
										kind = 70;
									jjCheckNAdd(44);
								}
								break;
							
							case 0: 
								if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
									break;
								if (kind > 6)
									kind = 6;
								jjCheckNAdd(0);
								break;
							
							case 2: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjAddStates(21, 23);
								break;
							
							case 17: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjstateSet[jjnewStateCnt++] = 18;
								break;
							
							case 26: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjAddStates(18, 20);
								break;
							
							case 35: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjAddStates(31, 33);
								break;
							
							case 43: 
							case 44: 
								if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
									break;
								if (kind > 70)
									kind = 70;
								jjCheckNAdd(44);
								break;
							
							case 66: 
								if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
									break;
								if (kind > 7)
									kind = 7;
								jjAddStates(0, 2);
								break;
							
							case 71: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjCheckNAddTwoStates(71, 72);
								break;
							
							case 73: 
							case 74: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjCheckNAddTwoStates(74, 72);
								break;
							
							case 77: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjCheckNAddTwoStates(77, 78);
								break;
							
							case 79: 
							case 80: 
								if (jjCanMove_1(hiByte, i1, i2, l1, l2))
									jjCheckNAddTwoStates(80, 78);
								break;
							
							default:  break;
							
						}
					}
					while (i != startsAt);
				}
				if (kind != 0x7fffffff)
				{
					jjmatchedKind = kind;
					jjmatchedPos = curPos;
					kind = 0x7fffffff;
				}
				++curPos;
				if ((i = jjnewStateCnt) == (startsAt = 83 - (jjnewStateCnt = startsAt)))
					return curPos;
				try
				{
					curChar = input_stream.readChar();
				}
				catch (System.IO.IOException e)
				{
					return curPos;
				}
			}
		}
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjnextStates'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		internal static readonly int[] jjnextStates = new int[]{66, 67, 69, 46, 47, 52, 53, 56, 57, 15, 65, 70, 82, 17, 19, 61, 63, 9, 26, 27, 29, 2, 3, 5, 11, 12, 15, 26, 27, 31, 29, 35, 38, 39, 35, 40, 38, 48, 49, 15, 56, 57, 15, 72, 73, 75, 78, 79, 81, 13, 14, 20, 21, 23, 28, 30, 32, 50, 51, 54, 55, 58, 59};
		private static bool jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
		{
			switch (hiByte)
			{
				
				case 0: 
					return ((jjbitVec0[i2] & l2) != 0L);
				
				default: 
					return false;
				
			}
		}
		private static bool jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
		{
			switch (hiByte)
			{
				
				case 0: 
					return ((jjbitVec0[i2] & l2) != 0L);
				
				default: 
					if ((jjbitVec1[i1] & l1) != 0L)
						return true;
					return false;
				
			}
		}
		private static bool jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
		{
			switch (hiByte)
			{
				
				case 0: 
					return ((jjbitVec4[i2] & l2) != 0L);
				
				case 48: 
					return ((jjbitVec5[i2] & l2) != 0L);
				
				case 49: 
					return ((jjbitVec6[i2] & l2) != 0L);
				
				case 51: 
					return ((jjbitVec7[i2] & l2) != 0L);
				
				case 61: 
					return ((jjbitVec8[i2] & l2) != 0L);
				
				default: 
					if ((jjbitVec3[i1] & l1) != 0L)
						return true;
					return false;
				
			}
		}
		
		/// <summary>Token literal values. </summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjstrLiteralImages'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		public static readonly System.String[] jjstrLiteralImages = new System.String[]{"", null, null, null, null, null, null, null, null, null, "\x0061\x0062\x0073\x0074\x0072\x0061\x0063\x0074", "\x0062\x006F\x006F\x006C\x0065\x0061\x006E", "\x0062\x0072\x0065\x0061\x006B", "\x0063\x006C\x0061\x0073\x0073", "\x0062\x0079\x0074\x0065", "\x0063\x0061\x0073\x0065", "\x0063\x0061\x0074\x0063\x0068", "\x0063\x0068\x0061\x0072", "\x0063\x006F\x006E\x0073\x0074", "\x0063\x006F\x006E\x0074\x0069\x006E\x0075\x0065", "\x0064\x0065\x0066\x0061\x0075\x006C\x0074", "\x0064\x006F", "\x0064\x006F\x0075\x0062\x006C\x0065", "\x0065\x006C\x0073\x0065", "\x0065\x006E\x0075\x006D", "\x0065\x0078\x0074\x0065\x006E\x0064\x0073", "\x0066\x0061\x006C\x0073\x0065", "\x0066\x0069\x006E\x0061\x006C", "\x0066\x0069\x006E\x0061\x006C\x006C\x0079", "\x0066\x006C\x006F\x0061\x0074", "\x0066\x006F\x0072", "\x0067\x006F\x0074\x006F", "\x0069\x0066", "\x0069\x006D\x0070\x006C\x0065\x006D\x0065\x006E\x0074\x0073", "\x0069\x006D\x0070\x006F\x0072\x0074", "\x0069\x006E\x0073\x0074\x0061\x006E\x0063\x0065\x006F\x0066", "\x0069\x006E\x0074", "\x0069\x006E\x0074\x0065\x0072\x0066\x0061\x0063\x0065", "\x006C\x006F\x006E\x0067", "\x006E\x0061\x0074\x0069\x0076\x0065", "\x006E\x0065\x0077", "\x006E\x0075\x006C\x006C", "\x0070\x0061\x0063\x006B\x0061\x0067\x0065", "\x0070\x0072\x0069\x0076\x0061\x0074\x0065", "\x0070\x0072\x006F\x0074\x0065\x0063\x0074\x0065\x0064", "\x0070\x0075\x0062\x006C\x0069\x0063", "\x0072\x0065\x0074\x0075\x0072\x006E", "\x0073\x0068\x006F\x0072\x0074", "\x0073\x0074\x0061\x0074\x0069\x0063", "\x0073\x0074\x0072\x0069\x0063\x0074\x0066\x0070", "\x0073\x0077\x0069\x0074\x0063\x0068", "\x0073\x0079\x006E\x0063\x0068\x0072\x006F\x006E\x0069\x007A\x0065\x0064", "\x0074\x0072\x0061\x006E\x0073\x0069\x0065\x006E\x0074", "\x0074\x0068\x0072\x006F\x0077", "\x0074\x0068\x0072\x006F\x0077\x0073", "\x0074\x0072\x0075\x0065", "\x0074\x0072\x0079", "\x0076\x006F\x0069\x0064", "\x0076\x006F\x006C\x0061\x0074\x0069\x006C\x0065", 
			"\x0077\x0068\x0069\x006C\x0065", null, null, null, null, null, null, null, null, null, null, null, null, null, "\x0028", "\x0029", "\x007B", "\x007D", "\x005B", "\x005D", "\x003B", "\x002C", "\x002E", "\x003D", "\x003E", "\x0040\x0067\x0074", "\x003C", "\x0040\x006C\x0074", "\x0021", "\x007E", "\x003F", "\x003A", "\x003D\x003D", "\x003C\x003D", "\x0040\x006C\x0074\x0065\x0071", "\x003E\x003D", "\x0040\x0067\x0074\x0065\x0071", "\x0021\x003D", "\x003D\x007E", "\x0021\x007E", "\x007C\x007C", "\x0040\x006F\x0072", "\x0026\x0026", "\x0040\x0061\x006E\x0064", "\x002B\x002B", "\x002D\x002D", "\x002B", "\x002D", "\x002A", "\x002F", "\x0026", "\x0040\x0062\x0069\x0074\x0077\x0069\x0073\x0065\x005F\x0061\x006E\x0064", "\x007C", "\x0040\x0062\x0069\x0074\x0077\x0069\x0073\x0065\x005F\x006F\x0072", "\x005E", "\x0025", "\x003C\x003C", "\x0040\x006C\x0065\x0066\x0074\x005F\x0073\x0068\x0069\x0066\x0074", "\x003E\x003E", "\x0040\x0072\x0069\x0067\x0068\x0074\x005F\x0073\x0068\x0069\x0066\x0074", "\x003E\x003E\x003E", "\x0040\x0072\x0069\x0067\x0068\x0074\x005F\x0075\x006E\x0073\x0069\x0067\x006E\x0065\x0064\x005F\x0073\x0068\x0069\x0066\x0074", "\x002B\x003D", "\x002D\x003D", "\x002A\x003D", "\x002F\x003D", "\x0026\x003D", "\x0040\x0061\x006E\x0064\x005F\x0061\x0073\x0073\x0069\x0067\x006E", "\x007C\x003D", "\x0040\x006F\x0072\x005F\x0061\x0073\x0073\x0069\x0067\x006E", "\x005E\x003D", "\x0025\x003D", "\x003C\x003C\x003D", "\x0040\x006C\x0065\x0066\x0074\x005F\x0073\x0068\x0069\x0066\x0074\x005F\x0061\x0073\x0073\x0069\x0067\x006E", "\x003E\x003E\x003D", "\x0040\x0072\x0069\x0067\x0068\x0074\x005F\x0073\x0068\x0069\x0066\x0074\x005F\x0061\x0073\x0073\x0069\x0067\x006E", "\x003E\x003E\x003E\x003D", "\x0040\x0072\x0069\x0067\x0068\x0074\x005F\x0075\x006E\x0073\x0069\x0067\x006E\x0065\x0064\x005F\x0073\x0068\x0069\x0066\x0074\x005F\x0061\x0073\x0073\x0069\x0067\x006E"};
		
		/// <summary>Lexer state names. </summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'lexStateNames'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		public static readonly System.String[] lexStateNames = new System.String[]{"DEFAULT"};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjtoToken'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_TODO: Literal detected as an unsigned long can generate compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1175'"
		internal static readonly long[] jjtoToken = new long[]{0x1ffffffffffffc01L, 0xfffffffffffffe7dL, 0x1ffL};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjtoSkip'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		internal static readonly long[] jjtoSkip = new long[]{0x3feL, 0x0L, 0x0L};
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjtoSpecial'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		internal static readonly long[] jjtoSpecial = new long[]{0x380L, 0x0L, 0x0L};
		protected internal JavaCharStream input_stream;
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjrounds '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private int[] jjrounds = new int[83];
		//UPGRADE_NOTE: Final was removed from the declaration of 'jjstateSet '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private int[] jjstateSet = new int[166];
		protected internal char curChar;
		/// <summary>Constructor. </summary>
		public ParserTokenManager(JavaCharStream stream)
		{
			InitBlock();
			if (JavaCharStream.staticFlag)
				throw new System.ApplicationException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
			input_stream = stream;
		}
		
		/// <summary>Constructor. </summary>
		public ParserTokenManager(JavaCharStream stream, int lexState):this(stream)
		{
			SwitchTo(lexState);
		}
		
		/// <summary>Reinitialise parser. </summary>
		public virtual void  ReInit(JavaCharStream stream)
		{
			jjmatchedPos = jjnewStateCnt = 0;
			curLexState = defaultLexState;
			input_stream = stream;
			ReInitRounds();
		}
		private void  ReInitRounds()
		{
			int i;
			jjround = unchecked((int) 0x80000001);
			for (i = 83; i-- > 0; )
				jjrounds[i] = unchecked((int) 0x80000000);
		}
		
		/// <summary>Reinitialise parser. </summary>
		public virtual void  ReInit(JavaCharStream stream, int lexState)
		{
			ReInit(stream);
			SwitchTo(lexState);
		}
		
		/// <summary>Switch to specified lex state. </summary>
		public virtual void  SwitchTo(int lexState)
		{
			if (lexState >= 1 || lexState < 0)
				throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
			else
				curLexState = lexState;
		}
		
		protected internal virtual Token jjFillToken()
		{
			//UPGRADE_NOTE: Final was removed from the declaration of 't '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			Token t;
			//UPGRADE_NOTE: Final was removed from the declaration of 'curTokenImage '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			System.String curTokenImage;
			//UPGRADE_NOTE: Final was removed from the declaration of 'beginLine '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			int beginLine;
			//UPGRADE_NOTE: Final was removed from the declaration of 'endLine '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			int endLine;
			//UPGRADE_NOTE: Final was removed from the declaration of 'beginColumn '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			int beginColumn;
			//UPGRADE_NOTE: Final was removed from the declaration of 'endColumn '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
			int endColumn;
			System.String im = jjstrLiteralImages[jjmatchedKind];
			curTokenImage = (im == null)?input_stream.GetImage():im;
			beginLine = input_stream.BeginLine;
			beginColumn = input_stream.BeginColumn;
			endLine = input_stream.EndLine;
			endColumn = input_stream.EndColumn;
			t = Token.newToken(jjmatchedKind, curTokenImage);
			
			t.beginLine = beginLine;
			t.endLine = endLine;
			t.beginColumn = beginColumn;
			t.endColumn = endColumn;
			
			return t;
		}
		
		internal int curLexState = 0;
		internal int defaultLexState = 0;
		internal int jjnewStateCnt;
		internal int jjround;
		internal int jjmatchedPos;
		internal int jjmatchedKind;
		
		private void  jjCheckNAdd(int state)
		{
			if (jjrounds[state] != jjround)
			{
				jjstateSet[jjnewStateCnt++] = state;
				jjrounds[state] = jjround;
			}
		}
		private void  jjAddStates(int start, int end)
		{
			do 
			{
				jjstateSet[jjnewStateCnt++] = jjnextStates[start];
			}
			while (start++ != end);
		}
		private void  jjCheckNAddTwoStates(int state1, int state2)
		{
			jjCheckNAdd(state1);
			jjCheckNAdd(state2);
		}
		
		private void  jjCheckNAddStates(int start, int end)
		{
			do 
			{
				jjCheckNAdd(jjnextStates[start]);
			}
			while (start++ != end);
		}
	}
}