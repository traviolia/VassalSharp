/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
using System;
namespace bsh
{
	
	
	/// <summary> Token literal values and constants.
	/// Generated by org.javacc.parser.OtherFilesGen#start()
	/// </summary>
	public struct ParserConstants_Fields{
		/// <summary>End of File. </summary>
		public readonly static int EOF = 0;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NONPRINTABLE = 6;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SINGLE_LINE_COMMENT = 7;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int HASH_BANG_COMMENT = 8;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MULTI_LINE_COMMENT = 9;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ABSTRACT = 10;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BOOLEAN = 11;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BREAK = 12;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CLASS = 13;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BYTE = 14;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CASE = 15;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CATCH = 16;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CHAR = 17;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CONST = 18;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CONTINUE = 19;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int _DEFAULT = 20;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DO = 21;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DOUBLE = 22;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ELSE = 23;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ENUM = 24;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int EXTENDS = 25;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FALSE = 26;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FINAL = 27;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FINALLY = 28;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FLOAT = 29;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FOR = 30;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int GOTO = 31;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int IF = 32;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int IMPLEMENTS = 33;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int IMPORT = 34;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int INSTANCEOF = 35;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int INT = 36;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int INTERFACE = 37;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LONG = 38;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NATIVE = 39;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NEW = 40;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NULL = 41;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PACKAGE = 42;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PRIVATE = 43;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PROTECTED = 44;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PUBLIC = 45;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RETURN = 46;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SHORT = 47;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int STATIC = 48;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int STRICTFP = 49;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SWITCH = 50;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SYNCHRONIZED = 51;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int TRANSIENT = 52;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int THROW = 53;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int THROWS = 54;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int TRUE = 55;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int TRY = 56;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int VOID = 57;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int VOLATILE = 58;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int WHILE = 59;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int INTEGER_LITERAL = 60;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DECIMAL_LITERAL = 61;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int HEX_LITERAL = 62;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int OCTAL_LITERAL = 63;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FLOATING_POINT_LITERAL = 64;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int EXPONENT = 65;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int CHARACTER_LITERAL = 66;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int STRING_LITERAL = 67;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LONG_STRING_LITERAL = 68;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int FORMAL_COMMENT = 69;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int IDENTIFIER = 70;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LETTER = 71;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DIGIT = 72;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LPAREN = 73;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RPAREN = 74;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LBRACE = 75;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RBRACE = 76;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LBRACKET = 77;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RBRACKET = 78;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SEMICOLON = 79;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int COMMA = 80;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DOT = 81;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ASSIGN = 82;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int GT = 83;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int GTX = 84;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LT = 85;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LTX = 86;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BANG = 87;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int TILDE = 88;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int HOOK = 89;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int COLON = 90;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int EQ = 91;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LE = 92;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LEX = 93;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int GE = 94;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int GEX = 95;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NE = 96;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MATCH = 97;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int NMATCH = 98;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BOOL_OR = 99;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BOOL_ORX = 100;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BOOL_AND = 101;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BOOL_ANDX = 102;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int INCR = 103;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int DECR = 104;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PLUS = 105;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MINUS = 106;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int STAR = 107;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SLASH = 108;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BIT_AND = 109;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BIT_ANDX = 110;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BIT_OR = 111;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int BIT_ORX = 112;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int XOR = 113;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MOD = 114;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LSHIFT = 115;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LSHIFTX = 116;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RSIGNEDSHIFT = 117;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RSIGNEDSHIFTX = 118;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RUNSIGNEDSHIFT = 119;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RUNSIGNEDSHIFTX = 120;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int PLUSASSIGN = 121;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MINUSASSIGN = 122;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int STARASSIGN = 123;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int SLASHASSIGN = 124;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ANDASSIGN = 125;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ANDASSIGNX = 126;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ORASSIGN = 127;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int ORASSIGNX = 128;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int XORASSIGN = 129;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int MODASSIGN = 130;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LSHIFTASSIGN = 131;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int LSHIFTASSIGNX = 132;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RSIGNEDSHIFTASSIGN = 133;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RSIGNEDSHIFTASSIGNX = 134;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RUNSIGNEDSHIFTASSIGN = 135;
		/// <summary>RegularExpression Id. </summary>
		public readonly static int RUNSIGNEDSHIFTASSIGNX = 136;
		/// <summary>Lexical state. </summary>
		public readonly static int DEFAULT = 0;
		/// <summary>Literal token values. </summary>
		public readonly static System.String[] tokenImage = new System.String[]{"<EOF>", "\" \"", "\"\\t\"", "\"\\r\"", "\"\\f\"", "\"\\n\"", "<NONPRINTABLE>", "<SINGLE_LINE_COMMENT>", "<HASH_BANG_COMMENT>", "<MULTI_LINE_COMMENT>", "\"abstract\"", "\"boolean\"", "\"break\"", "\"class\"", "\"byte\"", "\"case\"", "\"catch\"", "\"char\"", "\"const\"", "\"continue\"", "\"default\"", "\"do\"", "\"double\"", "\"else\"", "\"enum\"", "\"extends\"", "\"false\"", "\"final\"", "\"finally\"", "\"float\"", "\"for\"", "\"goto\"", "\"if\"", "\"implements\"", "\"import\"", "\"instanceof\"", "\"int\"", "\"interface\"", "\"long\"", "\"native\"", "\"new\"", "\"null\"", "\"package\"", "\"private\"", "\"protected\"", "\"public\"", "\"return\"", "\"short\"", "\"static\"", "\"strictfp\"", "\"switch\"", "\"synchronized\"", "\"transient\"", "\"throw\"", "\"throws\"", "\"true\"", "\"try\"", "\"void\"", "\"volatile\"", "\"while\"", "<INTEGER_LITERAL>", "<DECIMAL_LITERAL>", "<HEX_LITERAL>", "<OCTAL_LITERAL>", "<FLOATING_POINT_LITERAL>", "<EXPONENT>", "<CHARACTER_LITERAL>", "<STRING_LITERAL>", "<LONG_STRING_LITERAL>", "<FORMAL_COMMENT>", "<IDENTIFIER>", "<LETTER>", "<DIGIT>", "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"", "\",\"", "\".\"", "\"=\"", "\">\"", "\"@gt\"", "\"<\"", "\"@lt\"", "\"!\"", "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"", "\"@lteq\"", "\">=\"", "\"@gteq\"", "\"!=\"", "\"=~\"", "\"!~\"", "\"||\"", "\"@or\"", "\"&&\"", "\"@and\"", "\"++\"", "\"--\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"&\"", "\"@bitwise_and\"", "\"|\"", "\"@bitwise_or\"", "\"^\"", "\"%\"", "\"<<\"", "\"@left_shift\"", "\">>\"", "\"@right_shift\"", "\">>>\"", "\"@right_unsigned_shift\"", "\"+=\"", "\"-=\"", "\"*=\"", "\"/=\"", "\"&=\"", "\"@and_assign\"", "\"|=\"", "\"@or_assign\"", "\"^=\"", "\"%=\"", "\"<<=\"", "\"@left_shift_assign\"", "\">>=\"", "\"@right_shift_assign\"", "\">>>=\"", "\"@right_unsigned_shift_assign\""};
	}
	public interface ParserConstants
	{
		//UPGRADE_NOTE: Members of interface 'ParserConstants' were extracted into structure 'ParserConstants_Fields'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1045'"
		
	}
}