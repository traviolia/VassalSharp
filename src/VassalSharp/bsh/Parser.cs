/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
using System;
namespace bsh
{
	
	/// <summary>This is the BeanShell parser.  It is used internally by the Interpreter
	/// class (which is probably what you are looking for).  The parser knows
	/// only how to parse the structure of the language, it does not understand
	/// names, commands, etc.
	/// <p>
	/// You can use the Parser from the command line to do basic structural 
	/// validation of BeanShell files without actually executing them. e.g.
	/// <code><pre>
	/// java bsh.Parser [ -p ] file [ file ] [ ... ]
	/// </pre></code>
	/// <p>
	/// The -p option causes the abstract syntax to be printed.
	/// <p>
	/// From code you'd use the Parser like this:
	/// <p
	/// <code><pre>
	/// Parser parser = new Parser(in);
	/// while( !(eof=parser.Line()) ) {
	/// SimpleNode node = parser.popNode();
	/// // use the node, etc. (See bsh.BSH* classes)
	/// }
	/// </pre></code>
	/// </summary>
	public class Parser : ParserTreeConstants, ParserConstants
	{
		private void  InitBlock()
		{
			jj_ls = new LookaheadSuccess();
		}
		virtual public bool RetainComments
		{
			set
			{
				retainComments = value;
			}
			
		}
		/// <summary>Lookahead for the enhanced for statement.  
		/// Expect "for" "(" and then see whether we hit ":" or a ";" first.
		/// </summary>
		virtual internal bool RegularForStatement
		{
			get
			{
				int curTok = 1;
				Token tok;
				tok = getToken(curTok++);
				if (tok.kind != bsh.ParserConstants_Fields.FOR)
					return false;
				tok = getToken(curTok++);
				if (tok.kind != bsh.ParserConstants_Fields.LPAREN)
					return false;
				while (true)
				{
					tok = getToken(curTok++);
					switch (tok.kind)
					{
						
						case bsh.ParserConstants_Fields.COLON: 
							return false;
						
						case bsh.ParserConstants_Fields.SEMICOLON: 
							return true;
						
						case bsh.ParserConstants_Fields.EOF: 
							return false;
						}
				}
			}
			
		}
		/// <summary>Get the next Token. </summary>
		virtual public Token NextToken
		{
			get
			{
				if (token.next != null)
					token = token.next;
				else
					token = token.next = token_source.NextToken;
				jj_ntk_Renamed_Field = - 1;
				return token;
			}
			
		}
		/*@bgen(jjtree)*/
		protected internal JJTParserState jjtree = new JJTParserState(); internal bool retainComments = false;
		
		internal virtual void  jjtreeOpenNodeScope(Node n)
		{
			((SimpleNode) n).firstToken = getToken(1);
		}
		
		internal virtual void  jjtreeCloseNodeScope(Node n)
		{
			((SimpleNode) n).lastToken = getToken(0);
		}
		
		/// <summary>Re-initialize the input stream and token source.</summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		internal virtual void  reInitInput(System.IO.StreamReader in_Renamed)
		{
			ReInit(in_Renamed);
		}
		
		public virtual SimpleNode popNode()
		{
			if (jjtree.nodeArity() > 0)
			// number of child nodes 
				return (SimpleNode) jjtree.popNode();
			else
				return null;
		}
		
		/// <summary>Explicitly re-initialize just the token reader.
		/// This seems to be necessary to avoid certain looping errors when
		/// reading bogus input.  See Interpreter.
		/// </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		internal virtual void  reInitTokenInput(System.IO.StreamReader in_Renamed)
		{
			jj_input_stream.ReInit(in_Renamed, jj_input_stream.EndLine, jj_input_stream.EndColumn);
		}
		
		[STAThread]
		public static void  Main(System.String[] args)
		{
			bool print = false;
			int i = 0;
			if (args[0].Equals("-p"))
			{
				i++;
				print = true;
			}
			for (; i < args.Length; i++)
			{
				//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
				//UPGRADE_TODO: Constructor 'java.io.FileReader.FileReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'"
				System.IO.StreamReader in_Renamed = new System.IO.StreamReader(args[i], System.Text.Encoding.Default);
				Parser parser = new Parser(in_Renamed);
				parser.RetainComments = true;
				while (!parser.Line())
					if (print)
					{
						//UPGRADE_TODO: Method 'java.io.PrintStream.println' was converted to 'System.Console.Out.WriteLine' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioPrintStreamprintln_javalangObject'"
						System.Console.Out.WriteLine(parser.popNode());
					}
			}
		}
		
		/// <summary>Generate a ParseException with the specified message, pointing to the
		/// current token.
		/// The auto-generated Parser.generateParseException() method does not
		/// provide line number info, therefore we do this.
		/// </summary>
		internal virtual ParseException createParseException(System.String message, System.Exception e)
		{
			Token errortok = token;
			int line = errortok.beginLine, column = errortok.beginColumn;
			System.String mess = (errortok.kind == 0)?bsh.ParserConstants_Fields.tokenImage[0]:errortok.image;
			return new ParseException("Parse error at line " + line + ", column " + column + " : " + message);
		}
		
		internal virtual int parseInt(System.String s)
		{
			int radix;
			int i;
			if (s.StartsWith("0x") || s.StartsWith("0X"))
			{
				radix = 16;
				i = 2;
			}
			else if (s.StartsWith("0") && s.Length > 1)
			{
				radix = 8;
				i = 1;
			}
			else
			{
				radix = 10;
				i = 0;
			}
			int result = 0;
			int len = s.Length;
			for (; i < len; i++)
			{
				if (result < 0)
					throw new System.FormatException("Number too big for integer type: " + s);
				result *= radix;
				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Character.digit' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
				int digit = System.Char.GetNumericValue(s[i]);
				if (digit < 0)
					throw new System.FormatException("Invalid integer type: " + s);
				result += digit;
			}
			return result;
		}
		
		internal virtual long parseLong(System.String s)
		{
			int radix;
			int i;
			if (s.StartsWith("0x") || s.StartsWith("0X"))
			{
				radix = 16;
				i = 2;
			}
			else if (s.StartsWith("0") && s.Length > 1)
			{
				radix = 8;
				i = 1;
			}
			else
			{
				radix = 10;
				i = 0;
			}
			long result = 0;
			int len = s.Length;
			for (; i < len; i++)
			{
				if (result < 0L)
					throw new System.FormatException("Number too big for long type: " + s);
				result *= radix;
				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Character.digit' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
				int digit = System.Char.GetNumericValue(s[i]);
				if (digit < 0)
					throw new System.FormatException("Invalid long type: " + s);
				result += digit;
			}
			return result;
		}
		
		/*
		Thanks to Sreenivasa Viswanadha for suggesting how to get rid of expensive
		lookahead here.*/
		public bool Line()
		{
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case 0: 
					jj_consume_token(0);
					Interpreter.debug("End of File!");
					{
						if (true)
							return true;
					}
					break;
				
				default: 
					if (jj_2_1(1))
					{
						BlockStatement();
						{
							if (true)
								return false;
						}
					}
					else
					{
						jj_consume_token(- 1);
						throw new ParseException();
					}
					break;
				
			}
			throw new System.ApplicationException("Missing return statement in function");
		}
		
		/// <summary>**************************************
		/// THE JAVA LANGUAGE GRAMMAR STARTS HERE *
		/// ***************************************
		/// </summary>
		
		/*
		Gather modifiers for a class, method, or field.
		I lookahead is true then we are being called as part of a lookahead and we
		should not enforce any rules.  Otherwise we validate based on context
		(field, method, class)*/
		public Modifiers Modifiers(int context, bool lookahead)
		{
			Modifiers mods = null;
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.ABSTRACT: 
					case bsh.ParserConstants_Fields.FINAL: 
					case bsh.ParserConstants_Fields.NATIVE: 
					case bsh.ParserConstants_Fields.PRIVATE: 
					case bsh.ParserConstants_Fields.PROTECTED: 
					case bsh.ParserConstants_Fields.PUBLIC: 
					case bsh.ParserConstants_Fields.STATIC: 
					case bsh.ParserConstants_Fields.STRICTFP: 
					case bsh.ParserConstants_Fields.SYNCHRONIZED: 
					case bsh.ParserConstants_Fields.TRANSIENT: 
					case bsh.ParserConstants_Fields.VOLATILE: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_1_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.PRIVATE: 
						jj_consume_token(bsh.ParserConstants_Fields.PRIVATE);
						break;
					
					case bsh.ParserConstants_Fields.PROTECTED: 
						jj_consume_token(bsh.ParserConstants_Fields.PROTECTED);
						break;
					
					case bsh.ParserConstants_Fields.PUBLIC: 
						jj_consume_token(bsh.ParserConstants_Fields.PUBLIC);
						break;
					
					case bsh.ParserConstants_Fields.SYNCHRONIZED: 
						jj_consume_token(bsh.ParserConstants_Fields.SYNCHRONIZED);
						break;
					
					case bsh.ParserConstants_Fields.FINAL: 
						jj_consume_token(bsh.ParserConstants_Fields.FINAL);
						break;
					
					case bsh.ParserConstants_Fields.NATIVE: 
						jj_consume_token(bsh.ParserConstants_Fields.NATIVE);
						break;
					
					case bsh.ParserConstants_Fields.TRANSIENT: 
						jj_consume_token(bsh.ParserConstants_Fields.TRANSIENT);
						break;
					
					case bsh.ParserConstants_Fields.VOLATILE: 
						jj_consume_token(bsh.ParserConstants_Fields.VOLATILE);
						break;
					
					case bsh.ParserConstants_Fields.ABSTRACT: 
						jj_consume_token(bsh.ParserConstants_Fields.ABSTRACT);
						break;
					
					case bsh.ParserConstants_Fields.STATIC: 
						jj_consume_token(bsh.ParserConstants_Fields.STATIC);
						break;
					
					case bsh.ParserConstants_Fields.STRICTFP: 
						jj_consume_token(bsh.ParserConstants_Fields.STRICTFP);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				if (!lookahead)
					try
					{
						if (mods == null)
							mods = new Modifiers();
						mods.addModifier(context, getToken(0).image);
					}
					catch (System.SystemException e)
					{
						{
							if (true)
							{
								//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
								throw createParseException(e.Message, e);
							}
						}
					}
			}
			//UPGRADE_NOTE: Label 'label_1_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_1_brk: ;
			
			{
				if (true)
					return mods;
			}
			throw new System.ApplicationException("Missing return statement in function");
		}
		
		/// 
		public void  ClassDeclaration()
		{
			/*@bgen(jjtree) ClassDeclaration */
			BSHClassDeclaration jjtn000 = new BSHClassDeclaration(bsh.ParserTreeConstants_Fields.JJTCLASSDECLARATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Modifiers mods;
			Token name;
			int numInterfaces;
			try
			{
				mods = Modifiers(Modifiers.CLASS, false);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.CLASS: 
						jj_consume_token(bsh.ParserConstants_Fields.CLASS);
						break;
					
					case bsh.ParserConstants_Fields.INTERFACE: 
						jj_consume_token(bsh.ParserConstants_Fields.INTERFACE);
						jjtn000.isInterface = true;
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				name = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.EXTENDS: 
						jj_consume_token(bsh.ParserConstants_Fields.EXTENDS);
						AmbiguousName();
						jjtn000.extend = true;
						break;
					
					default: 
						;
						break;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.IMPLEMENTS: 
						jj_consume_token(bsh.ParserConstants_Fields.IMPLEMENTS);
						numInterfaces = NameList();
						jjtn000.numInterfaces = numInterfaces;
						break;
					
					default: 
						;
						break;
					
				}
				Block();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.modifiers = mods;
				jjtn000.name = name.image;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  MethodDeclaration()
		{
			/*@bgen(jjtree) MethodDeclaration */
			BSHMethodDeclaration jjtn000 = new BSHMethodDeclaration(bsh.ParserTreeConstants_Fields.JJTMETHODDECLARATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t = null;
			Modifiers mods;
			int count;
			try
			{
				mods = Modifiers(Modifiers.METHOD, false);
				jjtn000.modifiers = mods;
				if (jj_2_2(2147483647))
				{
					t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
					jjtn000.name = t.image;
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.BOOLEAN: 
						case bsh.ParserConstants_Fields.BYTE: 
						case bsh.ParserConstants_Fields.CHAR: 
						case bsh.ParserConstants_Fields.DOUBLE: 
						case bsh.ParserConstants_Fields.FLOAT: 
						case bsh.ParserConstants_Fields.INT: 
						case bsh.ParserConstants_Fields.LONG: 
						case bsh.ParserConstants_Fields.SHORT: 
						case bsh.ParserConstants_Fields.VOID: 
						case bsh.ParserConstants_Fields.IDENTIFIER: 
							ReturnType();
							t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
							jjtn000.name = t.image;
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
				FormalParameters();
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.THROWS: 
						jj_consume_token(bsh.ParserConstants_Fields.THROWS);
						count = NameList();
						jjtn000.numThrows = count;
						break;
					
					default: 
						;
						break;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LBRACE: 
						Block();
						break;
					
					case bsh.ParserConstants_Fields.SEMICOLON: 
						jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  PackageDeclaration()
		{
			/*@bgen(jjtree) PackageDeclaration */
			BSHPackageDeclaration jjtn000 = new BSHPackageDeclaration(bsh.ParserTreeConstants_Fields.JJTPACKAGEDECLARATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.PACKAGE);
				AmbiguousName();
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ImportDeclaration()
		{
			/*@bgen(jjtree) ImportDeclaration */
			BSHImportDeclaration jjtn000 = new BSHImportDeclaration(bsh.ParserTreeConstants_Fields.JJTIMPORTDECLARATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token s = null;
			Token t = null;
			try
			{
				if (jj_2_3(3))
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.STATIC: 
							s = jj_consume_token(bsh.ParserConstants_Fields.STATIC);
							break;
						
						default: 
							;
							break;
						
					}
					jj_consume_token(bsh.ParserConstants_Fields.IMPORT);
					AmbiguousName();
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.DOT: 
							t = jj_consume_token(bsh.ParserConstants_Fields.DOT);
							jj_consume_token(bsh.ParserConstants_Fields.STAR);
							break;
						
						default: 
							;
							break;
						
					}
					jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
					if (s != null)
						jjtn000.staticImport = true;
					if (t != null)
						jjtn000.importPackage = true;
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.IMPORT: 
							jj_consume_token(bsh.ParserConstants_Fields.IMPORT);
							jj_consume_token(bsh.ParserConstants_Fields.STAR);
							jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.superImport = true;
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  VariableDeclarator()
		{
			/*@bgen(jjtree) VariableDeclarator */
			BSHVariableDeclarator jjtn000 = new BSHVariableDeclarator(bsh.ParserTreeConstants_Fields.JJTVARIABLEDECLARATOR);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t;
			try
			{
				t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.ASSIGN: 
						jj_consume_token(bsh.ParserConstants_Fields.ASSIGN);
						VariableInitializer();
						break;
					
					default: 
						;
						break;
					
				}
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.name = t.image;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		this originally handled postfix array dimensions...
		
		void VariableDeclaratorId() #VariableDeclaratorId :
		{ Token t; }
		{
		t=<IDENTIFIER> { jjtThis.name = t.image; }
		( "[" "]" { jjtThis.addUndefinedDimension(); } )*
		}*/
		public void  VariableInitializer()
		{
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.LBRACE: 
					ArrayInitializer();
					break;
				
				case bsh.ParserConstants_Fields.BOOLEAN: 
				case bsh.ParserConstants_Fields.BYTE: 
				case bsh.ParserConstants_Fields.CHAR: 
				case bsh.ParserConstants_Fields.DOUBLE: 
				case bsh.ParserConstants_Fields.FALSE: 
				case bsh.ParserConstants_Fields.FLOAT: 
				case bsh.ParserConstants_Fields.INT: 
				case bsh.ParserConstants_Fields.LONG: 
				case bsh.ParserConstants_Fields.NEW: 
				case bsh.ParserConstants_Fields.NULL: 
				case bsh.ParserConstants_Fields.SHORT: 
				case bsh.ParserConstants_Fields.TRUE: 
				case bsh.ParserConstants_Fields.VOID: 
				case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
				case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
				case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
				case bsh.ParserConstants_Fields.STRING_LITERAL: 
				case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
				case bsh.ParserConstants_Fields.IDENTIFIER: 
				case bsh.ParserConstants_Fields.LPAREN: 
				case bsh.ParserConstants_Fields.BANG: 
				case bsh.ParserConstants_Fields.TILDE: 
				case bsh.ParserConstants_Fields.INCR: 
				case bsh.ParserConstants_Fields.DECR: 
				case bsh.ParserConstants_Fields.PLUS: 
				case bsh.ParserConstants_Fields.MINUS: 
					Expression();
					break;
				
				default: 
					jj_consume_token(- 1);
					throw new ParseException();
				
			}
		}
		
		public void  ArrayInitializer()
		{
			/*@bgen(jjtree) ArrayInitializer */
			BSHArrayInitializer jjtn000 = new BSHArrayInitializer(bsh.ParserTreeConstants_Fields.JJTARRAYINITIALIZER);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.LBRACE);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.LBRACE: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						VariableInitializer();
						while (true)
						{
							if (jj_2_4(2))
							{
								;
							}
							else
							{
								//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
								goto label_2_brk;
							}
							jj_consume_token(bsh.ParserConstants_Fields.COMMA);
							VariableInitializer();
						}
						//UPGRADE_NOTE: Label 'label_2_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_2_brk: ;
						
						break;
					
					default: 
						;
						break;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.COMMA: 
						jj_consume_token(bsh.ParserConstants_Fields.COMMA);
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.RBRACE);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  FormalParameters()
		{
			/*@bgen(jjtree) FormalParameters */
			BSHFormalParameters jjtn000 = new BSHFormalParameters(bsh.ParserTreeConstants_Fields.JJTFORMALPARAMETERS);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
						FormalParameter();
						while (true)
						{
							switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
							{
								
								case bsh.ParserConstants_Fields.COMMA: 
									;
									break;
								
								default: 
									//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
									goto label_3_brk;
								
							}
							jj_consume_token(bsh.ParserConstants_Fields.COMMA);
							FormalParameter();
						}
						//UPGRADE_NOTE: Label 'label_3_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_3_brk: ;
						
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  FormalParameter()
		{
			/*@bgen(jjtree) FormalParameter */
			BSHFormalParameter jjtn000 = new BSHFormalParameter(bsh.ParserTreeConstants_Fields.JJTFORMALPARAMETER);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t;
			try
			{
				if (jj_2_5(2))
				{
					Type();
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.LT: 
							TypeArguments();
							break;
						
						default: 
							;
							break;
						
					}
					t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
					jjtn000.name = t.image;
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.IDENTIFIER: 
							t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.name = t.image;
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		Type, name and expression syntax follows.*/
		public void  Type()
		{
			/*@bgen(jjtree) Type */
			BSHType jjtn000 = new BSHType(bsh.ParserTreeConstants_Fields.JJTTYPE);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.SHORT: 
						PrimitiveType();
						break;
					
					case bsh.ParserConstants_Fields.IDENTIFIER: 
						AmbiguousName();
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				while (true)
				{
					if (jj_2_6(2))
					{
						;
					}
					else
					{
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_4_brk;
					}
					jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
					jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
					jjtn000.addArrayDimension();
				}
				//UPGRADE_NOTE: Label 'label_4_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_4_brk: ;
				
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		Originally called ResultType in the grammar*/
		public void  ReturnType()
		{
			/*@bgen(jjtree) ReturnType */
			BSHReturnType jjtn000 = new BSHReturnType(bsh.ParserTreeConstants_Fields.JJTRETURNTYPE);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.VOID: 
						jj_consume_token(bsh.ParserConstants_Fields.VOID);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.isVoid = true;
						break;
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
						Type();
						switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
						{
							
							case bsh.ParserConstants_Fields.LT: 
								TypeArguments();
								break;
							
							default: 
								;
								break;
							
						}
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  PrimitiveType()
		{
			/*@bgen(jjtree) PrimitiveType */
			BSHPrimitiveType jjtn000 = new BSHPrimitiveType(bsh.ParserTreeConstants_Fields.JJTPRIMITIVETYPE);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
						jj_consume_token(bsh.ParserConstants_Fields.BOOLEAN);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Boolean");
						break;
					
					case bsh.ParserConstants_Fields.CHAR: 
						jj_consume_token(bsh.ParserConstants_Fields.CHAR);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Char");
						break;
					
					case bsh.ParserConstants_Fields.BYTE: 
						jj_consume_token(bsh.ParserConstants_Fields.BYTE);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.SByte");
						break;
					
					case bsh.ParserConstants_Fields.SHORT: 
						jj_consume_token(bsh.ParserConstants_Fields.SHORT);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Int16");
						break;
					
					case bsh.ParserConstants_Fields.INT: 
						jj_consume_token(bsh.ParserConstants_Fields.INT);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Int32");
						break;
					
					case bsh.ParserConstants_Fields.LONG: 
						jj_consume_token(bsh.ParserConstants_Fields.LONG);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Int64");
						break;
					
					case bsh.ParserConstants_Fields.FLOAT: 
						jj_consume_token(bsh.ParserConstants_Fields.FLOAT);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Single");
						break;
					
					case bsh.ParserConstants_Fields.DOUBLE: 
						jj_consume_token(bsh.ParserConstants_Fields.DOUBLE);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.type = System.Type.GetType("System.Double");
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  AmbiguousName()
		{
			/*@bgen(jjtree) AmbiguousName */
			BSHAmbiguousName jjtn000 = new BSHAmbiguousName(bsh.ParserTreeConstants_Fields.JJTAMBIGUOUSNAME);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t;
			StringBuilder s;
			try
			{
				t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
				s = new StringBuilder(t.image);
				while (true)
				{
					if (jj_2_7(2))
					{
						;
					}
					else
					{
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_5_brk;
					}
					jj_consume_token(bsh.ParserConstants_Fields.DOT);
					t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
					s.append("." + t.image);
				}
				//UPGRADE_NOTE: Label 'label_5_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_5_brk: ;
				
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.text = s.toString();
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public int NameList()
		{
			int count = 0;
			AmbiguousName();
			++count;
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.COMMA: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_6_brk;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.COMMA);
				AmbiguousName();
				++count;
			}
			//UPGRADE_NOTE: Label 'label_6_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_6_brk: ;
			
			{
				if (true)
					return count;
			}
			throw new System.ApplicationException("Missing return statement in function");
		}
		
		/*
		* Expression syntax follows.
		*/
		public void  Expression()
		{
			if (jj_2_8(2147483647))
			{
				Assignment();
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						ConditionalExpression();
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
		}
		
		public void  Assignment()
		{
			/*@bgen(jjtree) Assignment */
			BSHAssignment jjtn000 = new BSHAssignment(bsh.ParserTreeConstants_Fields.JJTASSIGNMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); int op;
			try
			{
				PrimaryExpression();
				op = AssignmentOperator();
				jjtn000.operator_Renamed = op;
				Expression();
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public int AssignmentOperator()
		{
			Token t;
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.ASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.ASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.STARASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.STARASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.SLASHASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.SLASHASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.MODASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.MODASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.PLUSASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.PLUSASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.MINUSASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.MINUSASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.ANDASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.ANDASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.XORASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.XORASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.ORASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.ORASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.LSHIFTASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.LSHIFTASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.LSHIFTASSIGNX: 
					jj_consume_token(bsh.ParserConstants_Fields.LSHIFTASSIGNX);
					break;
				
				case bsh.ParserConstants_Fields.RSIGNEDSHIFTASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.RSIGNEDSHIFTASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.RSIGNEDSHIFTASSIGNX: 
					jj_consume_token(bsh.ParserConstants_Fields.RSIGNEDSHIFTASSIGNX);
					break;
				
				case bsh.ParserConstants_Fields.RUNSIGNEDSHIFTASSIGN: 
					jj_consume_token(bsh.ParserConstants_Fields.RUNSIGNEDSHIFTASSIGN);
					break;
				
				case bsh.ParserConstants_Fields.RUNSIGNEDSHIFTASSIGNX: 
					jj_consume_token(bsh.ParserConstants_Fields.RUNSIGNEDSHIFTASSIGNX);
					break;
				
				default: 
					jj_consume_token(- 1);
					throw new ParseException();
				
			}
			t = getToken(0);
			{
				if (true)
					return t.kind;
			}
			throw new System.ApplicationException("Missing return statement in function");
		}
		
		public void  ConditionalExpression()
		{
			ConditionalOrExpression();
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.HOOK: 
					jj_consume_token(bsh.ParserConstants_Fields.HOOK);
					Expression();
					jj_consume_token(bsh.ParserConstants_Fields.COLON);
					BSHTernaryExpression jjtn001 = new BSHTernaryExpression(bsh.ParserTreeConstants_Fields.JJTTERNARYEXPRESSION);
					bool jjtc001 = true;
					jjtree.openNodeScope(jjtn001);
					jjtreeOpenNodeScope(jjtn001);
					try
					{
						ConditionalExpression();
					}
					//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
					catch (System.Exception jjte001)
					{
						if (jjtc001)
						{
							jjtree.clearNodeScope(jjtn001);
							jjtc001 = false;
						}
						else
						{
							jjtree.popNode();
						}
						if (jjte001 is System.SystemException)
						{
							{
								if (true)
									throw (System.SystemException) jjte001;
							}
						}
						if (jjte001 is ParseException)
						{
							{
								if (true)
									throw (ParseException) jjte001;
							}
						}
						{
							if (true)
								throw (System.ApplicationException) jjte001;
						}
					}
					finally
					{
						if (jjtc001)
						{
							jjtree.closeNodeScope(jjtn001, 3);
							jjtreeCloseNodeScope(jjtn001);
						}
					}
					break;
				
				default: 
					;
					break;
				
			}
		}
		
		public void  ConditionalOrExpression()
		{
			Token t = null;
			ConditionalAndExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOL_OR: 
					case bsh.ParserConstants_Fields.BOOL_ORX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_7_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOL_OR: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BOOL_OR);
						break;
					
					case bsh.ParserConstants_Fields.BOOL_ORX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BOOL_ORX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				ConditionalAndExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_7_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_7_brk: ;
			
		}
		
		public void  ConditionalAndExpression()
		{
			Token t = null;
			InclusiveOrExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOL_AND: 
					case bsh.ParserConstants_Fields.BOOL_ANDX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_8_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOL_AND: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BOOL_AND);
						break;
					
					case bsh.ParserConstants_Fields.BOOL_ANDX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BOOL_ANDX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				InclusiveOrExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_8_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_8_brk: ;
			
		}
		
		public void  InclusiveOrExpression()
		{
			Token t = null;
			ExclusiveOrExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BIT_OR: 
					case bsh.ParserConstants_Fields.BIT_ORX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_9_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BIT_OR: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BIT_OR);
						break;
					
					case bsh.ParserConstants_Fields.BIT_ORX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BIT_ORX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				ExclusiveOrExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_9_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_9_brk: ;
			
		}
		
		public void  ExclusiveOrExpression()
		{
			Token t = null;
			AndExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.XOR: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_10_brk;
					
				}
				t = jj_consume_token(bsh.ParserConstants_Fields.XOR);
				AndExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_10_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_10_brk: ;
			
		}
		
		public void  AndExpression()
		{
			Token t = null;
			EqualityExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BIT_AND: 
					case bsh.ParserConstants_Fields.BIT_ANDX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_11_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BIT_AND: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BIT_AND);
						break;
					
					case bsh.ParserConstants_Fields.BIT_ANDX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.BIT_ANDX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				EqualityExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_11_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_11_brk: ;
			
		}
		
		public void  EqualityExpression()
		{
			Token t = null;
			InstanceOfExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.EQ: 
					case bsh.ParserConstants_Fields.NE: 
					case bsh.ParserConstants_Fields.MATCH: 
					case bsh.ParserConstants_Fields.NMATCH: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_12_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.EQ: 
						t = jj_consume_token(bsh.ParserConstants_Fields.EQ);
						break;
					
					case bsh.ParserConstants_Fields.NE: 
						t = jj_consume_token(bsh.ParserConstants_Fields.NE);
						break;
					
					case bsh.ParserConstants_Fields.MATCH: 
						t = jj_consume_token(bsh.ParserConstants_Fields.MATCH);
						break;
					
					case bsh.ParserConstants_Fields.NMATCH: 
						t = jj_consume_token(bsh.ParserConstants_Fields.NMATCH);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				InstanceOfExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_12_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_12_brk: ;
			
		}
		
		public void  InstanceOfExpression()
		{
			Token t = null;
			RelationalExpression();
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.INSTANCEOF: 
					t = jj_consume_token(bsh.ParserConstants_Fields.INSTANCEOF);
					Type();
					BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
					bool jjtc001 = true;
					jjtree.openNodeScope(jjtn001);
					jjtreeOpenNodeScope(jjtn001);
					try
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtc001 = false;
						jjtreeCloseNodeScope(jjtn001);
						jjtn001.kind = t.kind;
					}
					finally
					{
						if (jjtc001)
						{
							jjtree.closeNodeScope(jjtn001, 2);
							jjtreeCloseNodeScope(jjtn001);
						}
					}
					break;
				
				default: 
					;
					break;
				
			}
		}
		
		public void  RelationalExpression()
		{
			Token t = null;
			ShiftExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.GT: 
					case bsh.ParserConstants_Fields.GTX: 
					case bsh.ParserConstants_Fields.LT: 
					case bsh.ParserConstants_Fields.LTX: 
					case bsh.ParserConstants_Fields.LE: 
					case bsh.ParserConstants_Fields.LEX: 
					case bsh.ParserConstants_Fields.GE: 
					case bsh.ParserConstants_Fields.GEX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_13_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LT: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LT);
						break;
					
					case bsh.ParserConstants_Fields.LTX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LTX);
						break;
					
					case bsh.ParserConstants_Fields.GT: 
						t = jj_consume_token(bsh.ParserConstants_Fields.GT);
						break;
					
					case bsh.ParserConstants_Fields.GTX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.GTX);
						break;
					
					case bsh.ParserConstants_Fields.LE: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LE);
						break;
					
					case bsh.ParserConstants_Fields.LEX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LEX);
						break;
					
					case bsh.ParserConstants_Fields.GE: 
						t = jj_consume_token(bsh.ParserConstants_Fields.GE);
						break;
					
					case bsh.ParserConstants_Fields.GEX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.GEX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				ShiftExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_13_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_13_brk: ;
			
		}
		
		public void  ShiftExpression()
		{
			Token t = null;
			AdditiveExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LSHIFT: 
					case bsh.ParserConstants_Fields.LSHIFTX: 
					case bsh.ParserConstants_Fields.RSIGNEDSHIFT: 
					case bsh.ParserConstants_Fields.RSIGNEDSHIFTX: 
					case bsh.ParserConstants_Fields.RUNSIGNEDSHIFT: 
					case bsh.ParserConstants_Fields.RUNSIGNEDSHIFTX: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_14_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LSHIFT: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LSHIFT);
						break;
					
					case bsh.ParserConstants_Fields.LSHIFTX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.LSHIFTX);
						break;
					
					case bsh.ParserConstants_Fields.RSIGNEDSHIFT: 
						t = jj_consume_token(bsh.ParserConstants_Fields.RSIGNEDSHIFT);
						break;
					
					case bsh.ParserConstants_Fields.RSIGNEDSHIFTX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.RSIGNEDSHIFTX);
						break;
					
					case bsh.ParserConstants_Fields.RUNSIGNEDSHIFT: 
						t = jj_consume_token(bsh.ParserConstants_Fields.RUNSIGNEDSHIFT);
						break;
					
					case bsh.ParserConstants_Fields.RUNSIGNEDSHIFTX: 
						t = jj_consume_token(bsh.ParserConstants_Fields.RUNSIGNEDSHIFTX);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				AdditiveExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_14_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_14_brk: ;
			
		}
		
		public void  AdditiveExpression()
		{
			Token t = null;
			MultiplicativeExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_15_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.PLUS: 
						t = jj_consume_token(bsh.ParserConstants_Fields.PLUS);
						break;
					
					case bsh.ParserConstants_Fields.MINUS: 
						t = jj_consume_token(bsh.ParserConstants_Fields.MINUS);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				MultiplicativeExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_15_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_15_brk: ;
			
		}
		
		public void  MultiplicativeExpression()
		{
			Token t = null;
			UnaryExpression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.STAR: 
					case bsh.ParserConstants_Fields.SLASH: 
					case bsh.ParserConstants_Fields.MOD: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_16_brk;
					
				}
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.STAR: 
						t = jj_consume_token(bsh.ParserConstants_Fields.STAR);
						break;
					
					case bsh.ParserConstants_Fields.SLASH: 
						t = jj_consume_token(bsh.ParserConstants_Fields.SLASH);
						break;
					
					case bsh.ParserConstants_Fields.MOD: 
						t = jj_consume_token(bsh.ParserConstants_Fields.MOD);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				UnaryExpression();
				BSHBinaryExpression jjtn001 = new BSHBinaryExpression(bsh.ParserTreeConstants_Fields.JJTBINARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 2);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 2);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			//UPGRADE_NOTE: Label 'label_16_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_16_brk: ;
			
		}
		
		public void  UnaryExpression()
		{
			Token t = null;
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.PLUS: 
				case bsh.ParserConstants_Fields.MINUS: 
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.PLUS: 
							t = jj_consume_token(bsh.ParserConstants_Fields.PLUS);
							break;
						
						case bsh.ParserConstants_Fields.MINUS: 
							t = jj_consume_token(bsh.ParserConstants_Fields.MINUS);
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
					UnaryExpression();
					BSHUnaryExpression jjtn001 = new BSHUnaryExpression(bsh.ParserTreeConstants_Fields.JJTUNARYEXPRESSION);
					bool jjtc001 = true;
					jjtree.openNodeScope(jjtn001);
					jjtreeOpenNodeScope(jjtn001);
					try
					{
						jjtree.closeNodeScope(jjtn001, 1);
						jjtc001 = false;
						jjtreeCloseNodeScope(jjtn001);
						jjtn001.kind = t.kind;
					}
					finally
					{
						if (jjtc001)
						{
							jjtree.closeNodeScope(jjtn001, 1);
							jjtreeCloseNodeScope(jjtn001);
						}
					}
					break;
				
				case bsh.ParserConstants_Fields.INCR: 
					PreIncrementExpression();
					break;
				
				case bsh.ParserConstants_Fields.DECR: 
					PreDecrementExpression();
					break;
				
				case bsh.ParserConstants_Fields.BOOLEAN: 
				case bsh.ParserConstants_Fields.BYTE: 
				case bsh.ParserConstants_Fields.CHAR: 
				case bsh.ParserConstants_Fields.DOUBLE: 
				case bsh.ParserConstants_Fields.FALSE: 
				case bsh.ParserConstants_Fields.FLOAT: 
				case bsh.ParserConstants_Fields.INT: 
				case bsh.ParserConstants_Fields.LONG: 
				case bsh.ParserConstants_Fields.NEW: 
				case bsh.ParserConstants_Fields.NULL: 
				case bsh.ParserConstants_Fields.SHORT: 
				case bsh.ParserConstants_Fields.TRUE: 
				case bsh.ParserConstants_Fields.VOID: 
				case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
				case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
				case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
				case bsh.ParserConstants_Fields.STRING_LITERAL: 
				case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
				case bsh.ParserConstants_Fields.IDENTIFIER: 
				case bsh.ParserConstants_Fields.LPAREN: 
				case bsh.ParserConstants_Fields.BANG: 
				case bsh.ParserConstants_Fields.TILDE: 
					UnaryExpressionNotPlusMinus();
					break;
				
				default: 
					jj_consume_token(- 1);
					throw new ParseException();
				
			}
		}
		
		public void  PreIncrementExpression()
		{
			Token t = null;
			t = jj_consume_token(bsh.ParserConstants_Fields.INCR);
			PrimaryExpression();
			BSHUnaryExpression jjtn001 = new BSHUnaryExpression(bsh.ParserTreeConstants_Fields.JJTUNARYEXPRESSION);
			bool jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			jjtreeOpenNodeScope(jjtn001);
			try
			{
				jjtree.closeNodeScope(jjtn001, 1);
				jjtc001 = false;
				jjtreeCloseNodeScope(jjtn001);
				jjtn001.kind = t.kind;
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 1);
					jjtreeCloseNodeScope(jjtn001);
				}
			}
		}
		
		public void  PreDecrementExpression()
		{
			Token t = null;
			t = jj_consume_token(bsh.ParserConstants_Fields.DECR);
			PrimaryExpression();
			BSHUnaryExpression jjtn001 = new BSHUnaryExpression(bsh.ParserTreeConstants_Fields.JJTUNARYEXPRESSION);
			bool jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			jjtreeOpenNodeScope(jjtn001);
			try
			{
				jjtree.closeNodeScope(jjtn001, 1);
				jjtc001 = false;
				jjtreeCloseNodeScope(jjtn001);
				jjtn001.kind = t.kind;
			}
			finally
			{
				if (jjtc001)
				{
					jjtree.closeNodeScope(jjtn001, 1);
					jjtreeCloseNodeScope(jjtn001);
				}
			}
		}
		
		public void  UnaryExpressionNotPlusMinus()
		{
			Token t = null;
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.BANG: 
				case bsh.ParserConstants_Fields.TILDE: 
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.TILDE: 
							t = jj_consume_token(bsh.ParserConstants_Fields.TILDE);
							break;
						
						case bsh.ParserConstants_Fields.BANG: 
							t = jj_consume_token(bsh.ParserConstants_Fields.BANG);
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
					UnaryExpression();
					BSHUnaryExpression jjtn001 = new BSHUnaryExpression(bsh.ParserTreeConstants_Fields.JJTUNARYEXPRESSION);
					bool jjtc001 = true;
					jjtree.openNodeScope(jjtn001);
					jjtreeOpenNodeScope(jjtn001);
					try
					{
						jjtree.closeNodeScope(jjtn001, 1);
						jjtc001 = false;
						jjtreeCloseNodeScope(jjtn001);
						jjtn001.kind = t.kind;
					}
					finally
					{
						if (jjtc001)
						{
							jjtree.closeNodeScope(jjtn001, 1);
							jjtreeCloseNodeScope(jjtn001);
						}
					}
					break;
				
				default: 
					if (jj_2_9(2147483647))
					{
						CastExpression();
					}
					else
					{
						switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
						{
							
							case bsh.ParserConstants_Fields.BOOLEAN: 
							case bsh.ParserConstants_Fields.BYTE: 
							case bsh.ParserConstants_Fields.CHAR: 
							case bsh.ParserConstants_Fields.DOUBLE: 
							case bsh.ParserConstants_Fields.FALSE: 
							case bsh.ParserConstants_Fields.FLOAT: 
							case bsh.ParserConstants_Fields.INT: 
							case bsh.ParserConstants_Fields.LONG: 
							case bsh.ParserConstants_Fields.NEW: 
							case bsh.ParserConstants_Fields.NULL: 
							case bsh.ParserConstants_Fields.SHORT: 
							case bsh.ParserConstants_Fields.TRUE: 
							case bsh.ParserConstants_Fields.VOID: 
							case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
							case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
							case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
							case bsh.ParserConstants_Fields.STRING_LITERAL: 
							case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
							case bsh.ParserConstants_Fields.IDENTIFIER: 
							case bsh.ParserConstants_Fields.LPAREN: 
								PostfixExpression();
								break;
							
							default: 
								jj_consume_token(- 1);
								throw new ParseException();
							
						}
					}
					break;
				
			}
		}
		
		// This production is to determine lookahead only.
		public void  CastLookahead()
		{
			if (jj_2_10(2))
			{
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				PrimitiveType();
			}
			else if (jj_2_11(2147483647))
			{
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				AmbiguousName();
				jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
				jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LPAREN: 
						jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
						AmbiguousName();
						jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
						switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
						{
							
							case bsh.ParserConstants_Fields.TILDE: 
								jj_consume_token(bsh.ParserConstants_Fields.TILDE);
								break;
							
							case bsh.ParserConstants_Fields.BANG: 
								jj_consume_token(bsh.ParserConstants_Fields.BANG);
								break;
							
							case bsh.ParserConstants_Fields.LPAREN: 
								jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
								break;
							
							case bsh.ParserConstants_Fields.IDENTIFIER: 
								jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
								break;
							
							case bsh.ParserConstants_Fields.NEW: 
								jj_consume_token(bsh.ParserConstants_Fields.NEW);
								break;
							
							case bsh.ParserConstants_Fields.FALSE: 
							case bsh.ParserConstants_Fields.NULL: 
							case bsh.ParserConstants_Fields.TRUE: 
							case bsh.ParserConstants_Fields.VOID: 
							case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
							case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
							case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
							case bsh.ParserConstants_Fields.STRING_LITERAL: 
							case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
								Literal();
								break;
							
							default: 
								jj_consume_token(- 1);
								throw new ParseException();
							
						}
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
		}
		
		public void  PostfixExpression()
		{
			Token t = null;
			if (jj_2_12(2147483647))
			{
				PrimaryExpression();
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.INCR: 
						t = jj_consume_token(bsh.ParserConstants_Fields.INCR);
						break;
					
					case bsh.ParserConstants_Fields.DECR: 
						t = jj_consume_token(bsh.ParserConstants_Fields.DECR);
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
				BSHUnaryExpression jjtn001 = new BSHUnaryExpression(bsh.ParserTreeConstants_Fields.JJTUNARYEXPRESSION);
				bool jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtreeOpenNodeScope(jjtn001);
				try
				{
					jjtree.closeNodeScope(jjtn001, 1);
					jjtc001 = false;
					jjtreeCloseNodeScope(jjtn001);
					jjtn001.kind = t.kind; jjtn001.postfix = true;
				}
				finally
				{
					if (jjtc001)
					{
						jjtree.closeNodeScope(jjtn001, 1);
						jjtreeCloseNodeScope(jjtn001);
					}
				}
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
						PrimaryExpression();
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
		}
		
		public void  CastExpression()
		{
			/*@bgen(jjtree) CastExpression */
			BSHCastExpression jjtn000 = new BSHCastExpression(bsh.ParserTreeConstants_Fields.JJTCASTEXPRESSION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				if (jj_2_13(2147483647))
				{
					jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
					Type();
					jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
					UnaryExpression();
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.LPAREN: 
							jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
							Type();
							jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
							UnaryExpressionNotPlusMinus();
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  PrimaryExpression()
		{
			/*@bgen(jjtree) PrimaryExpression */
			BSHPrimaryExpression jjtn000 = new BSHPrimaryExpression(bsh.ParserTreeConstants_Fields.JJTPRIMARYEXPRESSION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				PrimaryPrefix();
				while (true)
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.LBRACE: 
						case bsh.ParserConstants_Fields.LBRACKET: 
						case bsh.ParserConstants_Fields.DOT: 
							;
							break;
						
						default: 
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_17_brk;
						
					}
					PrimarySuffix();
				}
				//UPGRADE_NOTE: Label 'label_17_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_17_brk: ;
				
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  MethodInvocation()
		{
			/*@bgen(jjtree) MethodInvocation */
			BSHMethodInvocation jjtn000 = new BSHMethodInvocation(bsh.ParserTreeConstants_Fields.JJTMETHODINVOCATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				AmbiguousName();
				Arguments();
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  PrimaryPrefix()
		{
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.FALSE: 
				case bsh.ParserConstants_Fields.NULL: 
				case bsh.ParserConstants_Fields.TRUE: 
				case bsh.ParserConstants_Fields.VOID: 
				case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
				case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
				case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
				case bsh.ParserConstants_Fields.STRING_LITERAL: 
				case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					Literal();
					break;
				
				case bsh.ParserConstants_Fields.LPAREN: 
					jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
					Expression();
					jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
					break;
				
				case bsh.ParserConstants_Fields.NEW: 
					AllocationExpression();
					break;
				
				default: 
					if (jj_2_14(2147483647))
					{
						MethodInvocation();
					}
					else if (jj_2_15(2147483647))
					{
						Type();
					}
					else
					{
						switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
						{
							
							case bsh.ParserConstants_Fields.IDENTIFIER: 
								AmbiguousName();
								break;
							
							default: 
								jj_consume_token(- 1);
								throw new ParseException();
							
						}
					}
					break;
				
			}
		}
		
		public void  PrimarySuffix()
		{
			/*@bgen(jjtree) PrimarySuffix */
			BSHPrimarySuffix jjtn000 = new BSHPrimarySuffix(bsh.ParserTreeConstants_Fields.JJTPRIMARYSUFFIX);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t = null;
			try
			{
				if (jj_2_16(2))
				{
					jj_consume_token(bsh.ParserConstants_Fields.DOT);
					jj_consume_token(bsh.ParserConstants_Fields.CLASS);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
					jjtn000.operation = BSHPrimarySuffix.CLASS;
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.LBRACKET: 
							jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
							Expression();
							jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.operation = BSHPrimarySuffix.INDEX;
							break;
						
						case bsh.ParserConstants_Fields.DOT: 
							jj_consume_token(bsh.ParserConstants_Fields.DOT);
							t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
							switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
							{
								
								case bsh.ParserConstants_Fields.LPAREN: 
									Arguments();
									break;
								
								default: 
									;
									break;
								
							}
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.operation = BSHPrimarySuffix.NAME;
							jjtn000.field = t.image;
							break;
						
						case bsh.ParserConstants_Fields.LBRACE: 
							jj_consume_token(bsh.ParserConstants_Fields.LBRACE);
							Expression();
							jj_consume_token(bsh.ParserConstants_Fields.RBRACE);
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.operation = BSHPrimarySuffix.PROPERTY;
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  Literal()
		{
			/*@bgen(jjtree) Literal */
			BSHLiteral jjtn000 = new BSHLiteral(bsh.ParserTreeConstants_Fields.JJTLITERAL);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token x;
			bool b;
			System.String literal;
			char ch;
			try
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
						x = jj_consume_token(bsh.ParserConstants_Fields.INTEGER_LITERAL);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						literal = x.image;
						ch = literal[literal.Length - 1];
						if (ch == 'l' || ch == 'L')
						{
							literal = literal.Substring(0, (literal.Length - 1) - (0));
							try
							{
								jjtn000.value_Renamed = new Primitive(parseLong(literal));
							}
							catch (System.FormatException e)
							{
								{
									if (true)
									{
										//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
										throw createParseException(e.Message, e);
									}
								}
							}
						}
						else
							try
							{
								jjtn000.value_Renamed = new Primitive(parseInt(literal));
							}
							catch (System.FormatException e)
							{
								{
									if (true)
									{
										//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
										throw createParseException(e.Message, e);
									}
								}
							}
						break;
					
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
						x = jj_consume_token(bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						literal = x.image;
						ch = literal[literal.Length - 1];
						if (ch == 'f' || ch == 'F')
						{
							literal = literal.Substring(0, (literal.Length - 1) - (0));
							//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Float.floatValue' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
							jjtn000.value_Renamed = new Primitive((float) System.Single.Parse(literal));
						}
						else
						{
							if (ch == 'd' || ch == 'D')
								literal = literal.Substring(0, (literal.Length - 1) - (0));
							
							jjtn000.value_Renamed = new Primitive(System.Double.Parse(literal));
						}
						break;
					
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
						x = jj_consume_token(bsh.ParserConstants_Fields.CHARACTER_LITERAL);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						try
						{
							jjtn000.charSetup(x.image.Substring(1, (x.image.Length - 1) - (1)));
						}
						catch (System.Exception e)
						{
							{
								if (true)
									throw createParseException("Error parsing character: " + x.image, e);
							}
						}
						break;
					
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
						x = jj_consume_token(bsh.ParserConstants_Fields.STRING_LITERAL);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						try
						{
							jjtn000.stringSetup(x.image.Substring(1, (x.image.Length - 1) - (1)));
						}
						catch (System.Exception e)
						{
							{
								if (true)
									throw createParseException("Error parsing string: " + x.image, e);
							}
						}
						break;
					
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
						x = jj_consume_token(bsh.ParserConstants_Fields.LONG_STRING_LITERAL);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						try
						{
							jjtn000.value_Renamed = String.Intern(x.image.Substring(3, (x.image.Length - 3) - (3)));
						}
						catch (System.Exception e)
						{
							{
								if (true)
									throw createParseException("Error parsing long string: " + x.image, e);
							}
						}
						break;
					
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.TRUE: 
						b = BooleanLiteral();
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.value_Renamed = new Primitive(b);
						break;
					
					case bsh.ParserConstants_Fields.NULL: 
						NullLiteral();
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.value_Renamed = Primitive.NULL;
						break;
					
					case bsh.ParserConstants_Fields.VOID: 
						VoidLiteral();
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.value_Renamed = Primitive.VOID;
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public bool BooleanLiteral()
		{
			switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
			{
				
				case bsh.ParserConstants_Fields.TRUE: 
					jj_consume_token(bsh.ParserConstants_Fields.TRUE);
					{
						if (true)
							return true;
					}
					break;
				
				case bsh.ParserConstants_Fields.FALSE: 
					jj_consume_token(bsh.ParserConstants_Fields.FALSE);
					{
						if (true)
							return false;
					}
					break;
				
				default: 
					jj_consume_token(- 1);
					throw new ParseException();
				
			}
			throw new System.ApplicationException("Missing return statement in function");
		}
		
		public void  NullLiteral()
		{
			jj_consume_token(bsh.ParserConstants_Fields.NULL);
		}
		
		public void  VoidLiteral()
		{
			jj_consume_token(bsh.ParserConstants_Fields.VOID);
		}
		
		public void  Arguments()
		{
			/*@bgen(jjtree) Arguments */
			BSHArguments jjtn000 = new BSHArguments(bsh.ParserTreeConstants_Fields.JJTARGUMENTS);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						ArgumentList();
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		// leave these on the stack for Arguments() to handle
		public void  ArgumentList()
		{
			Expression();
			while (true)
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.COMMA: 
						;
						break;
					
					default: 
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_18_brk;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.COMMA);
				Expression();
			}
			//UPGRADE_NOTE: Label 'label_18_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_18_brk: ;
			
		}
		
		public void  TypeArguments()
		{
			jj_consume_token(bsh.ParserConstants_Fields.LT);
			jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
			jj_consume_token(bsh.ParserConstants_Fields.GT);
		}
		
		public void  AllocationExpression()
		{
			/*@bgen(jjtree) AllocationExpression */
			BSHAllocationExpression jjtn000 = new BSHAllocationExpression(bsh.ParserTreeConstants_Fields.JJTALLOCATIONEXPRESSION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				if (jj_2_18(2))
				{
					jj_consume_token(bsh.ParserConstants_Fields.NEW);
					PrimitiveType();
					ArrayDimensions();
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.NEW: 
							jj_consume_token(bsh.ParserConstants_Fields.NEW);
							AmbiguousName();
							switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
							{
								
								case bsh.ParserConstants_Fields.LT: 
									TypeArguments();
									break;
								
								default: 
									;
									break;
								
							}
							switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
							{
								
								case bsh.ParserConstants_Fields.LBRACKET: 
									ArrayDimensions();
									break;
								
								case bsh.ParserConstants_Fields.LPAREN: 
									Arguments();
									if (jj_2_17(2))
									{
										Block();
									}
									else
									{
										;
									}
									break;
								
								default: 
									jj_consume_token(- 1);
									throw new ParseException();
								
							}
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ArrayDimensions()
		{
			/*@bgen(jjtree) ArrayDimensions */
			BSHArrayDimensions jjtn000 = new BSHArrayDimensions(bsh.ParserTreeConstants_Fields.JJTARRAYDIMENSIONS);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				if (jj_2_21(2))
				{
					while (true)
					{
						jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
						Expression();
						jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
						jjtn000.addDefinedDimension();
						if (jj_2_19(2))
						{
							;
						}
						else
						{
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_19_brk;
						}
					}
					//UPGRADE_NOTE: Label 'label_19_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_19_brk: ;
					
					while (true)
					{
						if (jj_2_20(2))
						{
							;
						}
						else
						{
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_20_brk;
						}
						jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
						jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
						jjtn000.addUndefinedDimension();
					}
					//UPGRADE_NOTE: Label 'label_20_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_20_brk: ;
					
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.LBRACKET: 
							while (true)
							{
								jj_consume_token(bsh.ParserConstants_Fields.LBRACKET);
								jj_consume_token(bsh.ParserConstants_Fields.RBRACKET);
								jjtn000.addUndefinedDimension();
								switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
								{
									
									case bsh.ParserConstants_Fields.LBRACKET: 
										;
										break;
									
									default: 
										//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
										goto label_21_brk;
									
								}
							}
							//UPGRADE_NOTE: Label 'label_21_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_21_brk: ;
							
							ArrayInitializer();
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		* Statement syntax follows.
		*/
		public void  Statement()
		{
			if (jj_2_22(2))
			{
				LabeledStatement();
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LBRACE: 
						Block();
						break;
					
					case bsh.ParserConstants_Fields.SEMICOLON: 
						EmptyStatement();
						break;
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						StatementExpression();
						jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
						break;
					
					case bsh.ParserConstants_Fields.SWITCH: 
						SwitchStatement();
						break;
					
					case bsh.ParserConstants_Fields.IF: 
						IfStatement();
						break;
					
					case bsh.ParserConstants_Fields.WHILE: 
						WhileStatement();
						break;
					
					case bsh.ParserConstants_Fields.DO: 
						DoStatement();
						break;
					
					default: 
						if (RegularForStatement)
						{
							ForStatement();
						}
						else
						{
							switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
							{
								
								case bsh.ParserConstants_Fields.FOR: 
									EnhancedForStatement();
									break;
								
								case bsh.ParserConstants_Fields.BREAK: 
									BreakStatement();
									break;
								
								case bsh.ParserConstants_Fields.CONTINUE: 
									ContinueStatement();
									break;
								
								case bsh.ParserConstants_Fields.RETURN: 
									ReturnStatement();
									break;
								
								case bsh.ParserConstants_Fields.SYNCHRONIZED: 
									SynchronizedStatement();
									break;
								
								case bsh.ParserConstants_Fields.THROW: 
									ThrowStatement();
									break;
								
								case bsh.ParserConstants_Fields.TRY: 
									TryStatement();
									break;
								
								default: 
									jj_consume_token(- 1);
									throw new ParseException();
								
							}
						}
						break;
					
				}
			}
		}
		
		public void  LabeledStatement()
		{
			jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
			jj_consume_token(bsh.ParserConstants_Fields.COLON);
			Statement();
		}
		
		public void  Block()
		{
			/*@bgen(jjtree) Block */
			BSHBlock jjtn000 = new BSHBlock(bsh.ParserTreeConstants_Fields.JJTBLOCK);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.LBRACE);
				while (true)
				{
					if (jj_2_23(1))
					{
						;
					}
					else
					{
						//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
						goto label_22_brk;
					}
					BlockStatement();
				}
				//UPGRADE_NOTE: Label 'label_22_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_22_brk: ;
				
				jj_consume_token(bsh.ParserConstants_Fields.RBRACE);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  BlockStatement()
		{
			if (jj_2_24(2147483647))
			{
				ClassDeclaration();
			}
			else if (jj_2_25(2147483647))
			{
				MethodDeclaration();
			}
			else if (jj_2_26(2147483647))
			{
				MethodDeclaration();
			}
			else if (jj_2_27(2147483647))
			{
				TypedVariableDeclaration();
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
			}
			else if (jj_2_28(1))
			{
				Statement();
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.IMPORT: 
					case bsh.ParserConstants_Fields.STATIC: 
						ImportDeclaration();
						break;
					
					case bsh.ParserConstants_Fields.PACKAGE: 
						PackageDeclaration();
						break;
					
					case bsh.ParserConstants_Fields.FORMAL_COMMENT: 
						FormalComment();
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
		}
		
		public void  FormalComment()
		{
			/*@bgen(jjtree) #FormalComment( retainComments) */
			BSHFormalComment jjtn000 = new BSHFormalComment(bsh.ParserTreeConstants_Fields.JJTFORMALCOMMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t;
			try
			{
				t = jj_consume_token(bsh.ParserConstants_Fields.FORMAL_COMMENT);
				jjtree.closeNodeScope(jjtn000, retainComments);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.text = t.image;
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, retainComments);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  EmptyStatement()
		{
			jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
		}
		
		public void  StatementExpression()
		{
			Expression();
		}
		
		public void  SwitchStatement()
		{
			/*@bgen(jjtree) SwitchStatement */
			BSHSwitchStatement jjtn000 = new BSHSwitchStatement(bsh.ParserTreeConstants_Fields.JJTSWITCHSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.SWITCH);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				jj_consume_token(bsh.ParserConstants_Fields.LBRACE);
				while (true)
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.CASE: 
						case bsh.ParserConstants_Fields._DEFAULT: 
							;
							break;
						
						default: 
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_23_brk;
						
					}
					SwitchLabel();
					while (true)
					{
						if (jj_2_29(1))
						{
							;
						}
						else
						{
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_24_brk;
						}
						BlockStatement();
					}
					//UPGRADE_NOTE: Label 'label_24_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_24_brk: ;
					
				}
				//UPGRADE_NOTE: Label 'label_23_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_23_brk: ;
				
				jj_consume_token(bsh.ParserConstants_Fields.RBRACE);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  SwitchLabel()
		{
			/*@bgen(jjtree) SwitchLabel */
			BSHSwitchLabel jjtn000 = new BSHSwitchLabel(bsh.ParserTreeConstants_Fields.JJTSWITCHLABEL);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.CASE: 
						jj_consume_token(bsh.ParserConstants_Fields.CASE);
						Expression();
						jj_consume_token(bsh.ParserConstants_Fields.COLON);
						break;
					
					case bsh.ParserConstants_Fields._DEFAULT: 
						jj_consume_token(bsh.ParserConstants_Fields._DEFAULT);
						jj_consume_token(bsh.ParserConstants_Fields.COLON);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
						jjtreeCloseNodeScope(jjtn000);
						jjtn000.isDefault = true;
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  IfStatement()
		{
			/*@bgen(jjtree) IfStatement */
			BSHIfStatement jjtn000 = new BSHIfStatement(bsh.ParserTreeConstants_Fields.JJTIFSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.IF);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				Statement();
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.ELSE: 
						jj_consume_token(bsh.ParserConstants_Fields.ELSE);
						Statement();
						break;
					
					default: 
						;
						break;
					
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  WhileStatement()
		{
			/*@bgen(jjtree) WhileStatement */
			BSHWhileStatement jjtn000 = new BSHWhileStatement(bsh.ParserTreeConstants_Fields.JJTWHILESTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.WHILE);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				Statement();
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		Do statement is just a While statement with a special hook to execute
		at least once.*/
		public void  DoStatement()
		{
			/*@bgen(jjtree) WhileStatement */
			BSHWhileStatement jjtn000 = new BSHWhileStatement(bsh.ParserTreeConstants_Fields.JJTWHILESTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.DO);
				Statement();
				jj_consume_token(bsh.ParserConstants_Fields.WHILE);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.isDoStatement = true;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ForStatement()
		{
			/*@bgen(jjtree) ForStatement */
			BSHForStatement jjtn000 = new BSHForStatement(bsh.ParserTreeConstants_Fields.JJTFORSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t = null;
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.FOR);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.ABSTRACT: 
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FINAL: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NATIVE: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.PRIVATE: 
					case bsh.ParserConstants_Fields.PROTECTED: 
					case bsh.ParserConstants_Fields.PUBLIC: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.STATIC: 
					case bsh.ParserConstants_Fields.STRICTFP: 
					case bsh.ParserConstants_Fields.SYNCHRONIZED: 
					case bsh.ParserConstants_Fields.TRANSIENT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.VOLATILE: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						ForInit();
						jjtn000.hasForInit = true;
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						Expression();
						jjtn000.hasExpression = true;
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						ForUpdate();
						jjtn000.hasForUpdate = true;
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				Statement();
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		/*
		The new JDK1.5 enhanced for statement.
		e.g. for( int a : arrayOfInts ) { }
		We also support loose typing of the iterator var for BeanShell
		e.g. for( a : arrayOfInts ) { }*/
		public void  EnhancedForStatement()
		{
			/*@bgen(jjtree) EnhancedForStatement */
			BSHEnhancedForStatement jjtn000 = new BSHEnhancedForStatement(bsh.ParserTreeConstants_Fields.JJTENHANCEDFORSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t = null;
			try
			{
				if (jj_2_30(4))
				{
					jj_consume_token(bsh.ParserConstants_Fields.FOR);
					jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
					t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
					jj_consume_token(bsh.ParserConstants_Fields.COLON);
					Expression();
					jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
					Statement();
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
					jjtn000.varName = t.image;
				}
				else
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.FOR: 
							jj_consume_token(bsh.ParserConstants_Fields.FOR);
							jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
							Type();
							t = jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
							jj_consume_token(bsh.ParserConstants_Fields.COLON);
							Expression();
							jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
							Statement();
							jjtree.closeNodeScope(jjtn000, true);
							jjtc000 = false;
							jjtreeCloseNodeScope(jjtn000);
							jjtn000.varName = t.image;
							break;
						
						default: 
							jj_consume_token(- 1);
							throw new ParseException();
						
					}
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ForInit()
		{
			Token t = null;
			if (jj_2_31(2147483647))
			{
				TypedVariableDeclaration();
			}
			else
			{
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						StatementExpressionList();
						break;
					
					default: 
						jj_consume_token(- 1);
						throw new ParseException();
					
				}
			}
		}
		
		/// <summary>Declared a typed variable.
		/// Untyped variables are not declared per-se but are handled by the part
		/// of the grammar that deals with assignments.
		/// </summary>
		public void  TypedVariableDeclaration()
		{
			/*@bgen(jjtree) TypedVariableDeclaration */
			BSHTypedVariableDeclaration jjtn000 = new BSHTypedVariableDeclaration(bsh.ParserTreeConstants_Fields.JJTTYPEDVARIABLEDECLARATION);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); Token t = null;
			Modifiers mods;
			try
			{
				mods = Modifiers(Modifiers.FIELD, false);
				Type();
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.LT: 
						TypeArguments();
						break;
					
					default: 
						;
						break;
					
				}
				VariableDeclarator();
				while (true)
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.COMMA: 
							;
							break;
						
						default: 
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_25_brk;
						
					}
					jj_consume_token(bsh.ParserConstants_Fields.COMMA);
					VariableDeclarator();
				}
				//UPGRADE_NOTE: Label 'label_25_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_25_brk: ;
				
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.modifiers = mods;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  StatementExpressionList()
		{
			/*@bgen(jjtree) StatementExpressionList */
			BSHStatementExpressionList jjtn000 = new BSHStatementExpressionList(bsh.ParserTreeConstants_Fields.JJTSTATEMENTEXPRESSIONLIST);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				StatementExpression();
				while (true)
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.COMMA: 
							;
							break;
						
						default: 
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_26_brk;
						
					}
					jj_consume_token(bsh.ParserConstants_Fields.COMMA);
					StatementExpression();
				}
				//UPGRADE_NOTE: Label 'label_26_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_26_brk: ;
				
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ForUpdate()
		{
			StatementExpressionList();
		}
		
		public void  BreakStatement()
		{
			/*@bgen(jjtree) ReturnStatement */
			BSHReturnStatement jjtn000 = new BSHReturnStatement(bsh.ParserTreeConstants_Fields.JJTRETURNSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.BREAK);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.IDENTIFIER: 
						jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.kind = bsh.ParserConstants_Fields.BREAK;
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ContinueStatement()
		{
			/*@bgen(jjtree) ReturnStatement */
			BSHReturnStatement jjtn000 = new BSHReturnStatement(bsh.ParserTreeConstants_Fields.JJTRETURNSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.CONTINUE);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.IDENTIFIER: 
						jj_consume_token(bsh.ParserConstants_Fields.IDENTIFIER);
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.kind = bsh.ParserConstants_Fields.CONTINUE;
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ReturnStatement()
		{
			/*@bgen(jjtree) ReturnStatement */
			BSHReturnStatement jjtn000 = new BSHReturnStatement(bsh.ParserTreeConstants_Fields.JJTRETURNSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.RETURN);
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.BOOLEAN: 
					case bsh.ParserConstants_Fields.BYTE: 
					case bsh.ParserConstants_Fields.CHAR: 
					case bsh.ParserConstants_Fields.DOUBLE: 
					case bsh.ParserConstants_Fields.FALSE: 
					case bsh.ParserConstants_Fields.FLOAT: 
					case bsh.ParserConstants_Fields.INT: 
					case bsh.ParserConstants_Fields.LONG: 
					case bsh.ParserConstants_Fields.NEW: 
					case bsh.ParserConstants_Fields.NULL: 
					case bsh.ParserConstants_Fields.SHORT: 
					case bsh.ParserConstants_Fields.TRUE: 
					case bsh.ParserConstants_Fields.VOID: 
					case bsh.ParserConstants_Fields.INTEGER_LITERAL: 
					case bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL: 
					case bsh.ParserConstants_Fields.CHARACTER_LITERAL: 
					case bsh.ParserConstants_Fields.STRING_LITERAL: 
					case bsh.ParserConstants_Fields.LONG_STRING_LITERAL: 
					case bsh.ParserConstants_Fields.IDENTIFIER: 
					case bsh.ParserConstants_Fields.LPAREN: 
					case bsh.ParserConstants_Fields.BANG: 
					case bsh.ParserConstants_Fields.TILDE: 
					case bsh.ParserConstants_Fields.INCR: 
					case bsh.ParserConstants_Fields.DECR: 
					case bsh.ParserConstants_Fields.PLUS: 
					case bsh.ParserConstants_Fields.MINUS: 
						Expression();
						break;
					
					default: 
						;
						break;
					
				}
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.kind = bsh.ParserConstants_Fields.RETURN;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  SynchronizedStatement()
		{
			/*@bgen(jjtree) Block */
			BSHBlock jjtn000 = new BSHBlock(bsh.ParserTreeConstants_Fields.JJTBLOCK);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.SYNCHRONIZED);
				jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
				Block();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				jjtn000.isSynchronized = true;
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  ThrowStatement()
		{
			/*@bgen(jjtree) ThrowStatement */
			BSHThrowStatement jjtn000 = new BSHThrowStatement(bsh.ParserTreeConstants_Fields.JJTTHROWSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000);
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.THROW);
				Expression();
				jj_consume_token(bsh.ParserConstants_Fields.SEMICOLON);
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		public void  TryStatement()
		{
			/*@bgen(jjtree) TryStatement */
			BSHTryStatement jjtn000 = new BSHTryStatement(bsh.ParserTreeConstants_Fields.JJTTRYSTATEMENT);
			bool jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtreeOpenNodeScope(jjtn000); bool closed = false;
			try
			{
				jj_consume_token(bsh.ParserConstants_Fields.TRY);
				Block();
				while (true)
				{
					switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
					{
						
						case bsh.ParserConstants_Fields.CATCH: 
							;
							break;
						
						default: 
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto label_27_brk;
						
					}
					jj_consume_token(bsh.ParserConstants_Fields.CATCH);
					jj_consume_token(bsh.ParserConstants_Fields.LPAREN);
					FormalParameter();
					jj_consume_token(bsh.ParserConstants_Fields.RPAREN);
					Block();
					closed = true;
				}
				//UPGRADE_NOTE: Label 'label_27_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
label_27_brk: ;
				
				switch ((jj_ntk_Renamed_Field == - 1)?jj_ntk():jj_ntk_Renamed_Field)
				{
					
					case bsh.ParserConstants_Fields.FINALLY: 
						jj_consume_token(bsh.ParserConstants_Fields.FINALLY);
						Block();
						closed = true;
						break;
					
					default: 
						;
						break;
					
				}
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtreeCloseNodeScope(jjtn000);
				if (!closed)
				{
					if (true)
						throw generateParseException();
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception jjte000)
			{
				if (jjtc000)
				{
					jjtree.clearNodeScope(jjtn000);
					jjtc000 = false;
				}
				else
				{
					jjtree.popNode();
				}
				if (jjte000 is System.SystemException)
				{
					{
						if (true)
							throw (System.SystemException) jjte000;
					}
				}
				if (jjte000 is ParseException)
				{
					{
						if (true)
							throw (ParseException) jjte000;
					}
				}
				{
					if (true)
						throw (System.ApplicationException) jjte000;
				}
			}
			finally
			{
				if (jjtc000)
				{
					jjtree.closeNodeScope(jjtn000, true);
					jjtreeCloseNodeScope(jjtn000);
				}
			}
		}
		
		private bool jj_2_1(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_1();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_2(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_2();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_3(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_3();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_4(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_4();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_5(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_5();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_6(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_6();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_7(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_7();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_8(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_8();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_9(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_9();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_10(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_10();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_11(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_11();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_12(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_12();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_13(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_13();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_14(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_14();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_15(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_15();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_16(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_16();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_17(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_17();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_18(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_18();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_19(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_19();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_20(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_20();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_21(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_21();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_22(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_22();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_23(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_23();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_24(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_24();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_25(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_25();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_26(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_26();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_27(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_27();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_28(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_28();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_29(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_29();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_30(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_30();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_2_31(int xla)
		{
			jj_la = xla; jj_lastpos = jj_scanpos = token;
			try
			{
				return !jj_3_31();
			}
			catch (LookaheadSuccess ls)
			{
				return true;
			}
		}
		
		private bool jj_3R_59()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.GT))
				return true;
			return false;
		}
		
		private bool jj_3_18()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.NEW))
				return true;
			if (jj_3R_37())
				return true;
			if (jj_3R_155())
				return true;
			return false;
		}
		
		private bool jj_3R_134()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_18())
			{
				jj_scanpos = xsp;
				if (jj_3R_150())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_74()
		{
			if (jj_3R_111())
				return true;
			return false;
		}
		
		private bool jj_3R_40()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_73())
			{
				jj_scanpos = xsp;
				if (jj_3R_74())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_73()
		{
			if (jj_3R_110())
				return true;
			return false;
		}
		
		private bool jj_3R_152()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_40())
				return true;
			return false;
		}
		
		private bool jj_3R_138()
		{
			if (jj_3R_40())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_152())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_109()
		{
			if (jj_3R_138())
				return true;
			return false;
		}
		
		private bool jj_3R_72()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_109())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			return false;
		}
		
		private bool jj_3R_79()
		{
			if (jj_3R_29())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_115())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3_7()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DOT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3R_29()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_7())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_161()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FALSE))
				return true;
			return false;
		}
		
		private bool jj_3R_160()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.TRUE))
				return true;
			return false;
		}
		
		private bool jj_3R_154()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_160())
			{
				jj_scanpos = xsp;
				if (jj_3R_161())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_71()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DOUBLE))
				return true;
			return false;
		}
		
		private bool jj_3R_70()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FLOAT))
				return true;
			return false;
		}
		
		private bool jj_3R_69()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LONG))
				return true;
			return false;
		}
		
		private bool jj_3R_149()
		{
			if (jj_scan_token(57))
				return true;
			return false;
		}
		
		private bool jj_3R_68()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.INT))
				return true;
			return false;
		}
		
		private bool jj_3R_112()
		{
			if (jj_3R_59())
				return true;
			return false;
		}
		
		private bool jj_3R_67()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.SHORT))
				return true;
			return false;
		}
		
		private bool jj_3R_58()
		{
			if (jj_3R_29())
				return true;
			return false;
		}
		
		private bool jj_3R_66()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.BYTE))
				return true;
			return false;
		}
		
		private bool jj_3R_148()
		{
			if (jj_scan_token(41))
				return true;
			return false;
		}
		
		private bool jj_3R_65()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.CHAR))
				return true;
			return false;
		}
		
		private bool jj_3R_64()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.BOOLEAN))
				return true;
			return false;
		}
		
		private bool jj_3R_37()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_64())
			{
				jj_scanpos = xsp;
				if (jj_3R_65())
				{
					jj_scanpos = xsp;
					if (jj_3R_66())
					{
						jj_scanpos = xsp;
						if (jj_3R_67())
						{
							jj_scanpos = xsp;
							if (jj_3R_68())
							{
								jj_scanpos = xsp;
								if (jj_3R_69())
								{
									jj_scanpos = xsp;
									if (jj_3R_70())
									{
										jj_scanpos = xsp;
										if (jj_3R_71())
											return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_147()
		{
			if (jj_3R_154())
				return true;
			return false;
		}
		
		private bool jj_3R_77()
		{
			if (jj_3R_32())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_112())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_43()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_76())
			{
				jj_scanpos = xsp;
				if (jj_3R_77())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_76()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.VOID))
				return true;
			return false;
		}
		
		private bool jj_3_6()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3R_146()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LONG_STRING_LITERAL))
				return true;
			return false;
		}
		
		private bool jj_3R_33()
		{
			if (jj_3R_59())
				return true;
			return false;
		}
		
		private bool jj_3R_57()
		{
			if (jj_3R_37())
				return true;
			return false;
		}
		
		private bool jj_3R_114()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_113())
				return true;
			return false;
		}
		
		private bool jj_3R_197()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FINALLY))
				return true;
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_196()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.CATCH))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_113())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_145()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.STRING_LITERAL))
				return true;
			return false;
		}
		
		private bool jj_3R_128()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.TRY))
				return true;
			if (jj_3R_39())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_196())
				{
					jj_scanpos = xsp; break;
				}
			}
			xsp = jj_scanpos;
			if (jj_3R_197())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_32()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_57())
			{
				jj_scanpos = xsp;
				if (jj_3R_58())
					return true;
			}
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_6())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_144()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.CHARACTER_LITERAL))
				return true;
			return false;
		}
		
		private bool jj_3R_184()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_183())
				return true;
			return false;
		}
		
		private bool jj_3_4()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_31())
				return true;
			return false;
		}
		
		private bool jj_3R_140()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3_5()
		{
			if (jj_3R_32())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_33())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3R_78()
		{
			if (jj_3R_113())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_114())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_113()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_5())
			{
				jj_scanpos = xsp;
				if (jj_3R_140())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_127()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.THROW))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_195()
		{
			if (jj_3R_40())
				return true;
			return false;
		}
		
		private bool jj_3R_44()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_78())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			return false;
		}
		
		private bool jj_3R_169()
		{
			if (jj_3R_31())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_4())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_143()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FLOATING_POINT_LITERAL))
				return true;
			return false;
		}
		
		private bool jj_3R_126()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.SYNCHRONIZED))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_100()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACE))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_169())
				jj_scanpos = xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(80))
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACE))
				return true;
			return false;
		}
		
		private bool jj_3R_30()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DOT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.STAR))
				return true;
			return false;
		}
		
		private bool jj_3R_217()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_116())
				return true;
			return false;
		}
		
		private bool jj_3R_125()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.RETURN))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_195())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_187()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.ASSIGN))
				return true;
			if (jj_3R_31())
				return true;
			return false;
		}
		
		private bool jj_3R_56()
		{
			if (jj_3R_40())
				return true;
			return false;
		}
		
		private bool jj_3R_55()
		{
			if (jj_3R_100())
				return true;
			return false;
		}
		
		private bool jj_3R_31()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_55())
			{
				jj_scanpos = xsp;
				if (jj_3R_56())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_124()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.CONTINUE))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(70))
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_123()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.BREAK))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(70))
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_142()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.INTEGER_LITERAL))
				return true;
			return false;
		}
		
		private bool jj_3R_133()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_142())
			{
				jj_scanpos = xsp;
				if (jj_3R_143())
				{
					jj_scanpos = xsp;
					if (jj_3R_144())
					{
						jj_scanpos = xsp;
						if (jj_3R_145())
						{
							jj_scanpos = xsp;
							if (jj_3R_146())
							{
								jj_scanpos = xsp;
								if (jj_3R_147())
								{
									jj_scanpos = xsp;
									if (jj_3R_148())
									{
										jj_scanpos = xsp;
										if (jj_3R_149())
											return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_151()
		{
			if (jj_3R_72())
				return true;
			return false;
		}
		
		private bool jj_3R_202()
		{
			if (jj_3R_212())
				return true;
			return false;
		}
		
		private bool jj_3R_182()
		{
			if (jj_3R_59())
				return true;
			return false;
		}
		
		private bool jj_3R_108()
		{
			if (jj_3R_133())
				return true;
			return false;
		}
		
		private bool jj_3R_183()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_187())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_212()
		{
			if (jj_3R_116())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_217())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_96()
		{
			if (jj_3R_42())
				return true;
			if (jj_3R_32())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_182())
				jj_scanpos = xsp;
			if (jj_3R_183())
				return true;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_184())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_137()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACE))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACE))
				return true;
			return false;
		}
		
		private bool jj_3R_132()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IMPORT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.STAR))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_136()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DOT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_151())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3_31()
		{
			if (jj_3R_42())
				return true;
			if (jj_3R_32())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3_3()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(48))
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.IMPORT))
				return true;
			if (jj_3R_29())
				return true;
			xsp = jj_scanpos;
			if (jj_3R_30())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_97()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_3())
			{
				jj_scanpos = xsp;
				if (jj_3R_132())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_135()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3R_98()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.PACKAGE))
				return true;
			if (jj_3R_29())
				return true;
			return false;
		}
		
		private bool jj_3R_211()
		{
			if (jj_3R_212())
				return true;
			return false;
		}
		
		private bool jj_3_16()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DOT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.CLASS))
				return true;
			return false;
		}
		
		private bool jj_3R_107()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_16())
			{
				jj_scanpos = xsp;
				if (jj_3R_135())
				{
					jj_scanpos = xsp;
					if (jj_3R_136())
					{
						jj_scanpos = xsp;
						if (jj_3R_137())
							return true;
					}
				}
			}
			return false;
		}
		
		private bool jj_3_2()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			return false;
		}
		
		private bool jj_3R_181()
		{
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_210()
		{
			if (jj_3R_96())
				return true;
			return false;
		}
		
		private bool jj_3R_201()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_210())
			{
				jj_scanpos = xsp;
				if (jj_3R_211())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_180()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.THROWS))
				return true;
			if (jj_3R_79())
				return true;
			return false;
		}
		
		private bool jj_3_15()
		{
			if (jj_3R_32())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.DOT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.CLASS))
				return true;
			return false;
		}
		
		private bool jj_3_14()
		{
			if (jj_3R_38())
				return true;
			return false;
		}
		
		private bool jj_3R_141()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FOR))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_32())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3R_130()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3R_191()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.ELSE))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3R_131()
		{
			if (jj_3R_43())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3R_106()
		{
			if (jj_3R_29())
				return true;
			return false;
		}
		
		private bool jj_3R_95()
		{
			if (jj_3R_42())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_130())
			{
				jj_scanpos = xsp;
				if (jj_3R_131())
					return true;
			}
			if (jj_3R_44())
				return true;
			xsp = jj_scanpos;
			if (jj_3R_180())
				jj_scanpos = xsp;
			xsp = jj_scanpos;
			if (jj_3R_181())
			{
				jj_scanpos = xsp;
				if (jj_scan_token(79))
					return true;
			}
			return false;
		}
		
		private bool jj_3_30()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FOR))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3R_122()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_30())
			{
				jj_scanpos = xsp;
				if (jj_3R_141())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_105()
		{
			if (jj_3R_32())
				return true;
			return false;
		}
		
		private bool jj_3R_192()
		{
			if (jj_3R_201())
				return true;
			return false;
		}
		
		private bool jj_3R_61()
		{
			if (jj_3R_107())
				return true;
			return false;
		}
		
		private bool jj_3R_104()
		{
			if (jj_3R_38())
				return true;
			return false;
		}
		
		private bool jj_3R_194()
		{
			if (jj_3R_202())
				return true;
			return false;
		}
		
		private bool jj_3R_193()
		{
			if (jj_3R_40())
				return true;
			return false;
		}
		
		private bool jj_3R_129()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.INTERFACE))
				return true;
			return false;
		}
		
		private bool jj_3R_103()
		{
			if (jj_3R_134())
				return true;
			return false;
		}
		
		private bool jj_3R_102()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			return false;
		}
		
		private bool jj_3R_60()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_101())
			{
				jj_scanpos = xsp;
				if (jj_3R_102())
				{
					jj_scanpos = xsp;
					if (jj_3R_103())
					{
						jj_scanpos = xsp;
						if (jj_3R_104())
						{
							jj_scanpos = xsp;
							if (jj_3R_105())
							{
								jj_scanpos = xsp;
								if (jj_3R_106())
									return true;
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_101()
		{
			if (jj_3R_133())
				return true;
			return false;
		}
		
		private bool jj_3R_179()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IMPLEMENTS))
				return true;
			if (jj_3R_79())
				return true;
			return false;
		}
		
		private bool jj_3R_178()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.EXTENDS))
				return true;
			if (jj_3R_29())
				return true;
			return false;
		}
		
		private bool jj_3R_38()
		{
			if (jj_3R_29())
				return true;
			if (jj_3R_72())
				return true;
			return false;
		}
		
		private bool jj_3R_121()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FOR))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_192())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			xsp = jj_scanpos;
			if (jj_3R_193())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			xsp = jj_scanpos;
			if (jj_3R_194())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3_13()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_37())
				return true;
			return false;
		}
		
		private bool jj_3R_94()
		{
			if (jj_3R_42())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(13))
			{
				jj_scanpos = xsp;
				if (jj_3R_129())
					return true;
			}
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			xsp = jj_scanpos;
			if (jj_3R_178())
				jj_scanpos = xsp;
			xsp = jj_scanpos;
			if (jj_3R_179())
				jj_scanpos = xsp;
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_34()
		{
			if (jj_3R_60())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_61())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_120()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DO))
				return true;
			if (jj_3R_47())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.WHILE))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_224()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_32())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_215())
				return true;
			return false;
		}
		
		private bool jj_3R_223()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_32())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_198())
				return true;
			return false;
		}
		
		private bool jj_3R_221()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_223())
			{
				jj_scanpos = xsp;
				if (jj_3R_224())
					return true;
			}
			return false;
		}
		
		private bool jj_3_12()
		{
			if (jj_3R_34())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(103))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(104))
					return true;
			}
			return false;
		}
		
		private bool jj_3R_119()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.WHILE))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3R_226()
		{
			if (jj_3R_34())
				return true;
			return false;
		}
		
		private bool jj_3_11()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_29())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3_29()
		{
			if (jj_3R_28())
				return true;
			return false;
		}
		
		private bool jj_3R_118()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IF))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_3R_47())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_191())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_225()
		{
			if (jj_3R_34())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(103))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(104))
					return true;
			}
			return false;
		}
		
		private bool jj_3R_222()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_225())
			{
				jj_scanpos = xsp;
				if (jj_3R_226())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_75()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(43))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(44))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(45))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(51))
						{
							jj_scanpos = xsp;
							if (jj_scan_token(27))
							{
								jj_scanpos = xsp;
								if (jj_scan_token(39))
								{
									jj_scanpos = xsp;
									if (jj_scan_token(52))
									{
										jj_scanpos = xsp;
										if (jj_scan_token(58))
										{
											jj_scanpos = xsp;
											if (jj_scan_token(10))
											{
												jj_scanpos = xsp;
												if (jj_scan_token(48))
												{
													jj_scanpos = xsp;
													if (jj_scan_token(49))
														return true;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_63()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_29())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(88))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(87))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(73))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(70))
						{
							jj_scanpos = xsp;
							if (jj_scan_token(40))
							{
								jj_scanpos = xsp;
								if (jj_3R_108())
									return true;
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_209()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields._DEFAULT))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			return false;
		}
		
		private bool jj_3R_62()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_29())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3_9()
		{
			if (jj_3R_36())
				return true;
			return false;
		}
		
		private bool jj_3R_208()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.CASE))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			return false;
		}
		
		private bool jj_3R_200()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_208())
			{
				jj_scanpos = xsp;
				if (jj_3R_209())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_36()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_10())
			{
				jj_scanpos = xsp;
				if (jj_3R_62())
				{
					jj_scanpos = xsp;
					if (jj_3R_63())
						return true;
				}
			}
			return false;
		}
		
		private bool jj_3_10()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_37())
				return true;
			return false;
		}
		
		private bool jj_3R_190()
		{
			if (jj_3R_200())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_29())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_42()
		{
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_75())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_220()
		{
			if (jj_3R_222())
				return true;
			return false;
		}
		
		private bool jj_3R_117()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.SWITCH))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RPAREN))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACE))
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_190())
				{
					jj_scanpos = xsp; break;
				}
			}
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACE))
				return true;
			return false;
		}
		
		private bool jj_3R_219()
		{
			if (jj_3R_221())
				return true;
			return false;
		}
		
		private bool jj_3R_218()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(88))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(87))
					return true;
			}
			if (jj_3R_198())
				return true;
			return false;
		}
		
		private bool jj_3R_215()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_218())
			{
				jj_scanpos = xsp;
				if (jj_3R_219())
				{
					jj_scanpos = xsp;
					if (jj_3R_220())
						return true;
				}
			}
			return false;
		}
		
		private bool jj_3R_46()
		{
			if (jj_3R_59())
				return true;
			return false;
		}
		
		private bool jj_3R_214()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.DECR))
				return true;
			if (jj_3R_34())
				return true;
			return false;
		}
		
		private bool jj_3_1()
		{
			if (jj_3R_28())
				return true;
			return false;
		}
		
		private bool jj_3R_216()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(107))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(108))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(114))
						return true;
				}
			}
			if (jj_3R_198())
				return true;
			return false;
		}
		
		private bool jj_3R_213()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.INCR))
				return true;
			if (jj_3R_34())
				return true;
			return false;
		}
		
		private bool jj_3R_45()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.THROWS))
				return true;
			if (jj_3R_79())
				return true;
			return false;
		}
		
		private bool jj_3R_116()
		{
			if (jj_3R_40())
				return true;
			return false;
		}
		
		private bool jj_3R_206()
		{
			if (jj_3R_215())
				return true;
			return false;
		}
		
		private bool jj_3R_205()
		{
			if (jj_3R_214())
				return true;
			return false;
		}
		
		private bool jj_3R_204()
		{
			if (jj_3R_213())
				return true;
			return false;
		}
		
		private bool jj_3R_203()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(105))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(106))
					return true;
			}
			if (jj_3R_198())
				return true;
			return false;
		}
		
		private bool jj_3R_198()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_203())
			{
				jj_scanpos = xsp;
				if (jj_3R_204())
				{
					jj_scanpos = xsp;
					if (jj_3R_205())
					{
						jj_scanpos = xsp;
						if (jj_3R_206())
							return true;
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_99()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.FORMAL_COMMENT))
				return true;
			return false;
		}
		
		private bool jj_3R_188()
		{
			if (jj_3R_198())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_216())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_207()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(105))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(106))
					return true;
			}
			if (jj_3R_188())
				return true;
			return false;
		}
		
		private bool jj_3R_185()
		{
			if (jj_3R_188())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_207())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_54()
		{
			if (jj_3R_99())
				return true;
			return false;
		}
		
		private bool jj_3_27()
		{
			if (jj_3R_42())
				return true;
			if (jj_3R_32())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_46())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			return false;
		}
		
		private bool jj_3R_53()
		{
			if (jj_3R_98())
				return true;
			return false;
		}
		
		private bool jj_3R_199()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(115))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(116))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(117))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(118))
						{
							jj_scanpos = xsp;
							if (jj_scan_token(119))
							{
								jj_scanpos = xsp;
								if (jj_scan_token(120))
									return true;
							}
						}
					}
				}
			}
			if (jj_3R_185())
				return true;
			return false;
		}
		
		private bool jj_3R_52()
		{
			if (jj_3R_97())
				return true;
			return false;
		}
		
		private bool jj_3_26()
		{
			if (jj_3R_42())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_3R_44())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_45())
				jj_scanpos = xsp;
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACE))
				return true;
			return false;
		}
		
		private bool jj_3R_177()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(91))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(96))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(97))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(98))
							return true;
					}
				}
			}
			if (jj_3R_172())
				return true;
			return false;
		}
		
		private bool jj_3R_176()
		{
			if (jj_3R_185())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_199())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3_28()
		{
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3_25()
		{
			if (jj_3R_42())
				return true;
			if (jj_3R_43())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.LPAREN))
				return true;
			return false;
		}
		
		private bool jj_3R_51()
		{
			if (jj_3R_96())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3R_189()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(85))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(86))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(83))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(84))
						{
							jj_scanpos = xsp;
							if (jj_scan_token(92))
							{
								jj_scanpos = xsp;
								if (jj_scan_token(93))
								{
									jj_scanpos = xsp;
									if (jj_scan_token(94))
									{
										jj_scanpos = xsp;
										if (jj_scan_token(95))
											return true;
									}
								}
							}
						}
					}
				}
			}
			if (jj_3R_176())
				return true;
			return false;
		}
		
		private bool jj_3_24()
		{
			if (jj_3R_42())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(13))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(37))
					return true;
			}
			return false;
		}
		
		private bool jj_3R_174()
		{
			if (jj_3R_176())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_189())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_50()
		{
			if (jj_3R_95())
				return true;
			return false;
		}
		
		private bool jj_3R_186()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.INSTANCEOF))
				return true;
			if (jj_3R_32())
				return true;
			return false;
		}
		
		private bool jj_3R_49()
		{
			if (jj_3R_95())
				return true;
			return false;
		}
		
		private bool jj_3R_172()
		{
			if (jj_3R_174())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_186())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_48()
		{
			if (jj_3R_94())
				return true;
			return false;
		}
		
		private bool jj_3R_28()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_48())
			{
				jj_scanpos = xsp;
				if (jj_3R_49())
				{
					jj_scanpos = xsp;
					if (jj_3R_50())
					{
						jj_scanpos = xsp;
						if (jj_3R_51())
						{
							jj_scanpos = xsp;
							if (jj_3_28())
							{
								jj_scanpos = xsp;
								if (jj_3R_52())
								{
									jj_scanpos = xsp;
									if (jj_3R_53())
									{
										jj_scanpos = xsp;
										if (jj_3R_54())
											return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3_23()
		{
			if (jj_3R_28())
				return true;
			return false;
		}
		
		private bool jj_3R_173()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.XOR))
				return true;
			if (jj_3R_167())
				return true;
			return false;
		}
		
		private bool jj_3R_170()
		{
			if (jj_3R_172())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_177())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_39()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACE))
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_23())
				{
					jj_scanpos = xsp; break;
				}
			}
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACE))
				return true;
			return false;
		}
		
		private bool jj_3R_175()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(109))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(110))
					return true;
			}
			if (jj_3R_170())
				return true;
			return false;
		}
		
		private bool jj_3R_41()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.IDENTIFIER))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			if (jj_3R_47())
				return true;
			return false;
		}
		
		private bool jj_3R_167()
		{
			if (jj_3R_170())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_175())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_93()
		{
			if (jj_3R_128())
				return true;
			return false;
		}
		
		private bool jj_3R_92()
		{
			if (jj_3R_127())
				return true;
			return false;
		}
		
		private bool jj_3R_164()
		{
			if (jj_3R_167())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_173())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_91()
		{
			if (jj_3R_126())
				return true;
			return false;
		}
		
		private bool jj_3R_90()
		{
			if (jj_3R_125())
				return true;
			return false;
		}
		
		private bool jj_3R_89()
		{
			if (jj_3R_124())
				return true;
			return false;
		}
		
		private bool jj_3R_171()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(111))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(112))
					return true;
			}
			if (jj_3R_164())
				return true;
			return false;
		}
		
		private bool jj_3R_162()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.HOOK))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.COLON))
				return true;
			if (jj_3R_111())
				return true;
			return false;
		}
		
		private bool jj_3R_88()
		{
			if (jj_3R_123())
				return true;
			return false;
		}
		
		private bool jj_3R_87()
		{
			if (jj_3R_122())
				return true;
			return false;
		}
		
		private bool jj_3R_159()
		{
			if (jj_3R_164())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_171())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_86()
		{
			if (jj_3R_121())
				return true;
			return false;
		}
		
		private bool jj_3R_85()
		{
			if (jj_3R_120())
				return true;
			return false;
		}
		
		private bool jj_3R_168()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(101))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(102))
					return true;
			}
			if (jj_3R_159())
				return true;
			return false;
		}
		
		private bool jj_3R_84()
		{
			if (jj_3R_119())
				return true;
			return false;
		}
		
		private bool jj_3R_83()
		{
			if (jj_3R_118())
				return true;
			return false;
		}
		
		private bool jj_3R_153()
		{
			if (jj_3R_159())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_168())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_82()
		{
			if (jj_3R_117())
				return true;
			return false;
		}
		
		private bool jj_3R_81()
		{
			if (jj_3R_116())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.SEMICOLON))
				return true;
			return false;
		}
		
		private bool jj_3_17()
		{
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_165()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(99))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(100))
					return true;
			}
			if (jj_3R_153())
				return true;
			return false;
		}
		
		private bool jj_3R_80()
		{
			if (jj_3R_39())
				return true;
			return false;
		}
		
		private bool jj_3R_139()
		{
			if (jj_3R_153())
				return true;
			Token xsp;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_165())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_47()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_22())
			{
				jj_scanpos = xsp;
				if (jj_3R_80())
				{
					jj_scanpos = xsp;
					if (jj_scan_token(79))
					{
						jj_scanpos = xsp;
						if (jj_3R_81())
						{
							jj_scanpos = xsp;
							if (jj_3R_82())
							{
								jj_scanpos = xsp;
								if (jj_3R_83())
								{
									jj_scanpos = xsp;
									if (jj_3R_84())
									{
										jj_scanpos = xsp;
										if (jj_3R_85())
										{
											jj_scanpos = xsp;
											jj_lookingAhead = true;
											jj_semLA = RegularForStatement;
											jj_lookingAhead = false;
											if (!jj_semLA || jj_3R_86())
											{
												jj_scanpos = xsp;
												if (jj_3R_87())
												{
													jj_scanpos = xsp;
													if (jj_3R_88())
													{
														jj_scanpos = xsp;
														if (jj_3R_89())
														{
															jj_scanpos = xsp;
															if (jj_3R_90())
															{
																jj_scanpos = xsp;
																if (jj_3R_91())
																{
																	jj_scanpos = xsp;
																	if (jj_3R_92())
																	{
																		jj_scanpos = xsp;
																		if (jj_3R_93())
																			return true;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3_22()
		{
			if (jj_3R_41())
				return true;
			return false;
		}
		
		private bool jj_3R_156()
		{
			if (jj_3R_59())
				return true;
			return false;
		}
		
		private bool jj_3R_111()
		{
			if (jj_3R_139())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_162())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_166()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3R_158()
		{
			if (jj_3R_72())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_17())
				jj_scanpos = xsp;
			return false;
		}
		
		private bool jj_3R_163()
		{
			Token xsp;
			if (jj_3R_166())
				return true;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3R_166())
				{
					jj_scanpos = xsp; break;
				}
			}
			if (jj_3R_100())
				return true;
			return false;
		}
		
		private bool jj_3_20()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3R_157()
		{
			if (jj_3R_155())
				return true;
			return false;
		}
		
		private bool jj_3_19()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.LBRACKET))
				return true;
			if (jj_3R_40())
				return true;
			if (jj_scan_token(bsh.ParserConstants_Fields.RBRACKET))
				return true;
			return false;
		}
		
		private bool jj_3_21()
		{
			Token xsp;
			if (jj_3_19())
				return true;
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_19())
				{
					jj_scanpos = xsp; break;
				}
			}
			while (true)
			{
				xsp = jj_scanpos;
				if (jj_3_20())
				{
					jj_scanpos = xsp; break;
				}
			}
			return false;
		}
		
		private bool jj_3R_155()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3_21())
			{
				jj_scanpos = xsp;
				if (jj_3R_163())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_35()
		{
			Token xsp;
			xsp = jj_scanpos;
			if (jj_scan_token(82))
			{
				jj_scanpos = xsp;
				if (jj_scan_token(123))
				{
					jj_scanpos = xsp;
					if (jj_scan_token(124))
					{
						jj_scanpos = xsp;
						if (jj_scan_token(130))
						{
							jj_scanpos = xsp;
							if (jj_scan_token(121))
							{
								jj_scanpos = xsp;
								if (jj_scan_token(122))
								{
									jj_scanpos = xsp;
									if (jj_scan_token(125))
									{
										jj_scanpos = xsp;
										if (jj_scan_token(129))
										{
											jj_scanpos = xsp;
											if (jj_scan_token(127))
											{
												jj_scanpos = xsp;
												if (jj_scan_token(131))
												{
													jj_scanpos = xsp;
													if (jj_scan_token(132))
													{
														jj_scanpos = xsp;
														if (jj_scan_token(133))
														{
															jj_scanpos = xsp;
															if (jj_scan_token(134))
															{
																jj_scanpos = xsp;
																if (jj_scan_token(135))
																{
																	jj_scanpos = xsp;
																	if (jj_scan_token(136))
																		return true;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		private bool jj_3R_115()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.COMMA))
				return true;
			if (jj_3R_29())
				return true;
			return false;
		}
		
		private bool jj_3_8()
		{
			if (jj_3R_34())
				return true;
			if (jj_3R_35())
				return true;
			return false;
		}
		
		private bool jj_3R_150()
		{
			if (jj_scan_token(bsh.ParserConstants_Fields.NEW))
				return true;
			if (jj_3R_29())
				return true;
			Token xsp;
			xsp = jj_scanpos;
			if (jj_3R_156())
				jj_scanpos = xsp;
			xsp = jj_scanpos;
			if (jj_3R_157())
			{
				jj_scanpos = xsp;
				if (jj_3R_158())
					return true;
			}
			return false;
		}
		
		private bool jj_3R_110()
		{
			if (jj_3R_34())
				return true;
			if (jj_3R_35())
				return true;
			if (jj_3R_40())
				return true;
			return false;
		}
		
		/// <summary>Generated Token Manager. </summary>
		public ParserTokenManager token_source;
		internal JavaCharStream jj_input_stream;
		/// <summary>Current token. </summary>
		public Token token;
		/// <summary>Next token. </summary>
		public Token jj_nt;
		private int jj_ntk_Renamed_Field;
		private Token jj_scanpos, jj_lastpos;
		private int jj_la;
		/// <summary>Whether we are looking ahead. </summary>
		private bool jj_lookingAhead = false;
		private bool jj_semLA;
		
		/// <summary>Constructor with InputStream. </summary>
		public Parser(System.IO.Stream stream):this(stream, null)
		{
		}
		/// <summary>Constructor with InputStream and supplied encoding </summary>
		public Parser(System.IO.Stream stream, System.String encoding)
		{
			InitBlock();
			try
			{
				jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
			}
			catch (System.IO.IOException e)
			{
				throw new RuntimeException(e);
			}
			token_source = new ParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
		}
		
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream stream)
		{
			ReInit(stream, null);
		}
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream stream, System.String encoding)
		{
			try
			{
				jj_input_stream.ReInit(stream, encoding, 1, 1);
			}
			catch (System.IO.IOException e)
			{
				throw new RuntimeException(e);
			}
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
			jjtree.reset();
		}
		
		/// <summary>Constructor. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public Parser(System.IO.StreamReader stream)
		{
			InitBlock();
			jj_input_stream = new JavaCharStream(stream, 1, 1);
			token_source = new ParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
		}
		
		/// <summary>Reinitialise. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public virtual void  ReInit(System.IO.StreamReader stream)
		{
			jj_input_stream.ReInit(stream, 1, 1);
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
			jjtree.reset();
		}
		
		/// <summary>Constructor with generated Token Manager. </summary>
		public Parser(ParserTokenManager tm)
		{
			InitBlock();
			token_source = tm;
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
		}
		
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(ParserTokenManager tm)
		{
			token_source = tm;
			token = new Token();
			jj_ntk_Renamed_Field = - 1;
			jjtree.reset();
		}
		
		private Token jj_consume_token(int kind)
		{
			Token oldToken;
			if ((oldToken = token).next != null)
				token = token.next;
			else
				token = token.next = token_source.NextToken;
			jj_ntk_Renamed_Field = - 1;
			if (token.kind == kind)
			{
				return token;
			}
			token = oldToken;
			throw generateParseException();
		}
		
		[Serializable]
		private sealed class LookaheadSuccess:System.ApplicationException
		{
		}
		//UPGRADE_NOTE: Final was removed from the declaration of 'jj_ls '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		//UPGRADE_NOTE: The initialization of  'jj_ls' was moved to method 'InitBlock'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1005'"
		private LookaheadSuccess jj_ls;
		private bool jj_scan_token(int kind)
		{
			if (jj_scanpos == jj_lastpos)
			{
				jj_la--;
				if (jj_scanpos.next == null)
				{
					jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.NextToken;
				}
				else
				{
					jj_lastpos = jj_scanpos = jj_scanpos.next;
				}
			}
			else
			{
				jj_scanpos = jj_scanpos.next;
			}
			if (jj_scanpos.kind != kind)
				return true;
			if (jj_la == 0 && jj_scanpos == jj_lastpos)
				throw jj_ls;
			return false;
		}
		
		/// <summary>Get the specific Token. </summary>
		public Token getToken(int index)
		{
			Token t = jj_lookingAhead?jj_scanpos:token;
			for (int i = 0; i < index; i++)
			{
				if (t.next != null)
					t = t.next;
				else
					t = t.next = token_source.NextToken;
			}
			return t;
		}
		
		private int jj_ntk()
		{
			if ((jj_nt = token.next) == null)
				return (jj_ntk_Renamed_Field = (token.next = token_source.NextToken).kind);
			else
				return (jj_ntk_Renamed_Field = jj_nt.kind);
		}
		
		/// <summary>Generate ParseException. </summary>
		public virtual ParseException generateParseException()
		{
			Token errortok = token.next;
			int line = errortok.beginLine, column = errortok.beginColumn;
			System.String mess = (errortok.kind == 0)?bsh.ParserConstants_Fields.tokenImage[0]:errortok.image;
			return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
		}
		
		/// <summary>Enable tracing. </summary>
		public void  enable_tracing()
		{
		}
		
		/// <summary>Disable tracing. </summary>
		public void  disable_tracing()
		{
		}
	}
}