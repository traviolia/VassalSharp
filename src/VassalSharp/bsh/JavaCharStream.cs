/* Generated By:JavaCC: Do not edit this line. JavaCharStream.java Version 4.1 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
using System;
namespace bsh
{
	
	/// <summary> An implementation of interface CharStream, where the stream is assumed to
	/// contain only ASCII characters (with java-like unicode escape processing).
	/// </summary>
	
	public class JavaCharStream
	{
		/// <deprecated>
		/// </deprecated>
		/// <seealso cref="getEndColumn">
		/// </seealso>
		virtual public int Column
		{
			get
			{
				return bufcolumn[bufpos];
			}
			
		}
		/// <deprecated>
		/// </deprecated>
		/// <seealso cref="getEndLine">
		/// </seealso>
		virtual public int Line
		{
			get
			{
				return bufline[bufpos];
			}
			
		}
		/// <summary>Get end column. </summary>
		virtual public int EndColumn
		{
			get
			{
				return bufcolumn[bufpos];
			}
			
		}
		/// <summary>Get end line. </summary>
		virtual public int EndLine
		{
			get
			{
				return bufline[bufpos];
			}
			
		}
		/// <returns> column of token start 
		/// </returns>
		virtual public int BeginColumn
		{
			get
			{
				return bufcolumn[tokenBegin];
			}
			
		}
		/// <returns> line number of token start 
		/// </returns>
		virtual public int BeginLine
		{
			get
			{
				return bufline[tokenBegin];
			}
			
		}
		/// <summary>Whether parser is static. </summary>
		public const bool staticFlag = false;
		
		internal static int hexval(char c)
		{
			switch (c)
			{
				
				case '0': 
					return 0;
				
				case '1': 
					return 1;
				
				case '2': 
					return 2;
				
				case '3': 
					return 3;
				
				case '4': 
					return 4;
				
				case '5': 
					return 5;
				
				case '6': 
					return 6;
				
				case '7': 
					return 7;
				
				case '8': 
					return 8;
				
				case '9': 
					return 9;
				
				
				case 'a': 
				case 'A': 
					return 10;
				
				case 'b': 
				case 'B': 
					return 11;
				
				case 'c': 
				case 'C': 
					return 12;
				
				case 'd': 
				case 'D': 
					return 13;
				
				case 'e': 
				case 'E': 
					return 14;
				
				case 'f': 
				case 'F': 
					return 15;
				}
			
			throw new System.IO.IOException(); // Should never come here
		}
		
		/// <summary>Position in buffer. </summary>
		public int bufpos = - 1;
		internal int bufsize;
		internal int available;
		internal int tokenBegin;
		protected internal int[] bufline;
		protected internal int[] bufcolumn;
		
		protected internal int column = 0;
		protected internal int line = 1;
		
		protected internal bool prevCharIsCR = false;
		protected internal bool prevCharIsLF = false;
		
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		protected internal System.IO.StreamReader inputStream;
		
		protected internal char[] nextCharBuf;
		protected internal char[] buffer;
		protected internal int maxNextCharInd = 0;
		protected internal int nextCharInd = - 1;
		protected internal int inBuf = 0;
		protected internal int tabSize = 8;
		
		protected internal virtual void  setTabSize(int i)
		{
			tabSize = i;
		}
		protected internal virtual int getTabSize(int i)
		{
			return tabSize;
		}
		
		protected internal virtual void  ExpandBuff(bool wrapAround)
		{
			char[] newbuffer = new char[bufsize + 2048];
			int[] newbufline = new int[bufsize + 2048];
			int[] newbufcolumn = new int[bufsize + 2048];
			
			try
			{
				if (wrapAround)
				{
					Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
					Array.Copy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
					buffer = newbuffer;
					
					Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
					Array.Copy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
					bufline = newbufline;
					
					Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
					Array.Copy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
					bufcolumn = newbufcolumn;
					
					bufpos += (bufsize - tokenBegin);
				}
				else
				{
					Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
					buffer = newbuffer;
					
					Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
					bufline = newbufline;
					
					Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
					bufcolumn = newbufcolumn;
					
					bufpos -= tokenBegin;
				}
			}
			//UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
			catch (System.Exception t)
			{
				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"
				throw new System.ApplicationException(t.Message);
			}
			
			available = (bufsize += 2048);
			tokenBegin = 0;
		}
		
		protected internal virtual void  FillBuff()
		{
			int i;
			if (maxNextCharInd == 4096)
				maxNextCharInd = nextCharInd = 0;
			
			try
			{
				//UPGRADE_TODO: Method 'java.io.Reader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioReaderread_char[]_int_int'"
				if ((i = inputStream.Read(nextCharBuf, maxNextCharInd, 4096 - maxNextCharInd)) == - 1)
				{
					inputStream.Close();
					throw new System.IO.IOException();
				}
				else
					maxNextCharInd += i;
				return ;
			}
			catch (System.IO.IOException e)
			{
				if (bufpos != 0)
				{
					--bufpos;
					backup(0);
				}
				else
				{
					bufline[bufpos] = line;
					bufcolumn[bufpos] = column;
				}
				throw e;
			}
		}
		
		protected internal virtual char ReadByte()
		{
			if (++nextCharInd >= maxNextCharInd)
				FillBuff();
			
			return nextCharBuf[nextCharInd];
		}
		
		/// <returns> starting character for token. 
		/// </returns>
		public virtual char BeginToken()
		{
			if (inBuf > 0)
			{
				--inBuf;
				
				if (++bufpos == bufsize)
					bufpos = 0;
				
				tokenBegin = bufpos;
				return buffer[bufpos];
			}
			
			tokenBegin = 0;
			bufpos = - 1;
			
			return readChar();
		}
		
		protected internal virtual void  AdjustBuffSize()
		{
			if (available == bufsize)
			{
				if (tokenBegin > 2048)
				{
					bufpos = 0;
					available = tokenBegin;
				}
				else
					ExpandBuff(false);
			}
			else if (available > tokenBegin)
				available = bufsize;
			else if ((tokenBegin - available) < 2048)
				ExpandBuff(true);
			else
				available = tokenBegin;
		}
		
		protected internal virtual void  UpdateLineColumn(char c)
		{
			column++;
			
			if (prevCharIsLF)
			{
				prevCharIsLF = false;
				line += (column = 1);
			}
			else if (prevCharIsCR)
			{
				prevCharIsCR = false;
				if (c == '\n')
				{
					prevCharIsLF = true;
				}
				else
					line += (column = 1);
			}
			
			switch (c)
			{
				
				case '\r': 
					prevCharIsCR = true;
					break;
				
				case '\n': 
					prevCharIsLF = true;
					break;
				
				case '\t': 
					column--;
					column += (tabSize - (column % tabSize));
					break;
				
				default: 
					break;
				
			}
			
			bufline[bufpos] = line;
			bufcolumn[bufpos] = column;
		}
		
		/// <summary>Read a character. </summary>
		public virtual char readChar()
		{
			if (inBuf > 0)
			{
				--inBuf;
				
				if (++bufpos == bufsize)
					bufpos = 0;
				
				return buffer[bufpos];
			}
			
			char c;
			
			if (++bufpos == available)
				AdjustBuffSize();
			
			if ((buffer[bufpos] = c = ReadByte()) == '\\')
			{
				UpdateLineColumn(c);
				
				int backSlashCnt = 1;
				
				for (; ; )
				// Read all the backslashes
				{
					if (++bufpos == available)
						AdjustBuffSize();
					
					try
					{
						if ((buffer[bufpos] = c = ReadByte()) != '\\')
						{
							UpdateLineColumn(c);
							// found a non-backslash char.
							if ((c == 'u') && ((backSlashCnt & 1) == 1))
							{
								if (--bufpos < 0)
									bufpos = bufsize - 1;
								
								break;
							}
							
							backup(backSlashCnt);
							return '\\';
						}
					}
					catch (System.IO.IOException e)
					{
						// We are returning one backslash so we should only backup (count-1)
						if (backSlashCnt > 1)
							backup(backSlashCnt - 1);
						
						return '\\';
					}
					
					UpdateLineColumn(c);
					backSlashCnt++;
				}
				
				// Here, we have seen an odd number of backslash's followed by a 'u'
				try
				{
					while ((c = ReadByte()) == 'u')
						++column;
					
					buffer[bufpos] = c = (char) (hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));
					
					column += 4;
				}
				catch (System.IO.IOException e)
				{
					throw new System.ApplicationException("Invalid escape character at line " + line + " column " + column + ".");
				}
				
				if (backSlashCnt == 1)
					return c;
				else
				{
					backup(backSlashCnt - 1);
					return '\\';
				}
			}
			else
			{
				UpdateLineColumn(c);
				return c;
			}
		}
		
		/// <summary>Retreat. </summary>
		public virtual void  backup(int amount)
		{
			
			inBuf += amount;
			if ((bufpos -= amount) < 0)
				bufpos += bufsize;
		}
		
		/// <summary>Constructor. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public JavaCharStream(System.IO.StreamReader dstream, int startline, int startcolumn, int buffersize)
		{
			inputStream = dstream;
			line = startline;
			column = startcolumn - 1;
			
			available = bufsize = buffersize;
			buffer = new char[buffersize];
			bufline = new int[buffersize];
			bufcolumn = new int[buffersize];
			nextCharBuf = new char[4096];
		}
		
		/// <summary>Constructor. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public JavaCharStream(System.IO.StreamReader dstream, int startline, int startcolumn):this(dstream, startline, startcolumn, 4096)
		{
		}
		
		/// <summary>Constructor. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public JavaCharStream(System.IO.StreamReader dstream):this(dstream, 1, 1, 4096)
		{
		}
		/// <summary>Reinitialise. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public virtual void  ReInit(System.IO.StreamReader dstream, int startline, int startcolumn, int buffersize)
		{
			inputStream = dstream;
			line = startline;
			column = startcolumn - 1;
			
			if (buffer == null || buffersize != buffer.Length)
			{
				available = bufsize = buffersize;
				buffer = new char[buffersize];
				bufline = new int[buffersize];
				bufcolumn = new int[buffersize];
				nextCharBuf = new char[4096];
			}
			prevCharIsLF = prevCharIsCR = false;
			tokenBegin = inBuf = maxNextCharInd = 0;
			nextCharInd = bufpos = - 1;
		}
		
		/// <summary>Reinitialise. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public virtual void  ReInit(System.IO.StreamReader dstream, int startline, int startcolumn)
		{
			ReInit(dstream, startline, startcolumn, 4096);
		}
		
		/// <summary>Reinitialise. </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		public virtual void  ReInit(System.IO.StreamReader dstream)
		{
			ReInit(dstream, 1, 1, 4096);
		}
		/// <summary>Constructor. </summary>
		//UPGRADE_TODO: Constructor 'java.io.InputStreamReader.InputStreamReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderInputStreamReader_javaioInputStream_javalangString'"
		public JavaCharStream(System.IO.Stream dstream, System.String encoding, int startline, int startcolumn, int buffersize):this(encoding == null?new System.IO.StreamReader(dstream, System.Text.Encoding.Default):new System.IO.StreamReader(dstream, System.Text.Encoding.GetEncoding(encoding)), startline, startcolumn, buffersize)
		{
		}
		
		/// <summary>Constructor. </summary>
		public JavaCharStream(System.IO.Stream dstream, int startline, int startcolumn, int buffersize):this(new System.IO.StreamReader(dstream, System.Text.Encoding.Default), startline, startcolumn, 4096)
		{
		}
		
		/// <summary>Constructor. </summary>
		public JavaCharStream(System.IO.Stream dstream, System.String encoding, int startline, int startcolumn):this(dstream, encoding, startline, startcolumn, 4096)
		{
		}
		
		/// <summary>Constructor. </summary>
		public JavaCharStream(System.IO.Stream dstream, int startline, int startcolumn):this(dstream, startline, startcolumn, 4096)
		{
		}
		
		/// <summary>Constructor. </summary>
		public JavaCharStream(System.IO.Stream dstream, System.String encoding):this(dstream, encoding, 1, 1, 4096)
		{
		}
		
		/// <summary>Constructor. </summary>
		public JavaCharStream(System.IO.Stream dstream):this(dstream, 1, 1, 4096)
		{
		}
		
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream, System.String encoding, int startline, int startcolumn, int buffersize)
		{
			//UPGRADE_TODO: Constructor 'java.io.InputStreamReader.InputStreamReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderInputStreamReader_javaioInputStream_javalangString'"
			ReInit(encoding == null?new System.IO.StreamReader(dstream, System.Text.Encoding.Default):new System.IO.StreamReader(dstream, System.Text.Encoding.GetEncoding(encoding)), startline, startcolumn, buffersize);
		}
		
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream, int startline, int startcolumn, int buffersize)
		{
			ReInit(new System.IO.StreamReader(dstream, System.Text.Encoding.Default), startline, startcolumn, buffersize);
		}
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream, System.String encoding, int startline, int startcolumn)
		{
			ReInit(dstream, encoding, startline, startcolumn, 4096);
		}
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream, int startline, int startcolumn)
		{
			ReInit(dstream, startline, startcolumn, 4096);
		}
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream, System.String encoding)
		{
			ReInit(dstream, encoding, 1, 1, 4096);
		}
		
		/// <summary>Reinitialise. </summary>
		public virtual void  ReInit(System.IO.Stream dstream)
		{
			ReInit(dstream, 1, 1, 4096);
		}
		
		/// <returns> token image as String 
		/// </returns>
		public virtual System.String GetImage()
		{
			if (bufpos >= tokenBegin)
				return new System.String(buffer, tokenBegin, bufpos - tokenBegin + 1);
			else
				return new System.String(buffer, tokenBegin, bufsize - tokenBegin) + new System.String(buffer, 0, bufpos + 1);
		}
		
		/// <returns> suffix 
		/// </returns>
		public virtual char[] GetSuffix(int len)
		{
			char[] ret = new char[len];
			
			if ((bufpos + 1) >= len)
				Array.Copy(buffer, bufpos - len + 1, ret, 0, len);
			else
			{
				Array.Copy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
				Array.Copy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
			}
			
			return ret;
		}
		
		/// <summary>Set buffers back to null when finished. </summary>
		public virtual void  Done()
		{
			nextCharBuf = null;
			buffer = null;
			bufline = null;
			bufcolumn = null;
		}
		
		/// <summary> Method to adjust line and column numbers for the start of a token.</summary>
		public virtual void  adjustBeginLineColumn(int newLine, int newCol)
		{
			int start = tokenBegin;
			int len;
			
			if (bufpos >= tokenBegin)
			{
				len = bufpos - tokenBegin + inBuf + 1;
			}
			else
			{
				len = bufsize - tokenBegin + bufpos + 1 + inBuf;
			}
			
			int i = 0, j = 0, k = 0;
			int nextColDiff = 0, columnDiff = 0;
			
			while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
			{
				bufline[j] = newLine;
				nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
				bufcolumn[j] = newCol + columnDiff;
				columnDiff = nextColDiff;
				i++;
			}
			
			if (i < len)
			{
				bufline[j] = newLine++;
				bufcolumn[j] = newCol + columnDiff;
				
				while (i++ < len)
				{
					if (bufline[j = start % bufsize] != bufline[++start % bufsize])
						bufline[j] = newLine++;
					else
						bufline[j] = newLine;
				}
			}
			
			line = bufline[j];
			column = bufcolumn[j];
		}
	}
	/* JavaCC - OriginalChecksum=bb735a7a31246dc66edee5a012cf449e (do not edit this line) */
}