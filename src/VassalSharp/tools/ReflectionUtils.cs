/*
 * Copyright (c) 2008 by Joel Uckelman
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License (LGPL) as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, copies are available
 * at http://www.opensource.org.
 */

using System;

namespace VassalSharp.tools
{
    /// <author>  Joel Uckelman
    /// </author>
    /// <since> 3.1.0
    /// </since>
    public class ReflectionUtils
    {
        private ReflectionUtils() { }

        public static void handleImportClassFailure(Exception t, string className)
        {
            handle(t, className, typeof(System.Exception), typeof(System.Exception), typeof(System.ApplicationException), typeof(System.MethodAccessException), typeof(System.Security.SecurityException), typeof(System.UnauthorizedAccessException), typeof(System.ArgumentException), typeof(System.Exception), typeof(System.Reflection.TargetInvocationException));
        }

        /// <summary> Handle a {@link Throwable} generated by
        /// <code>Class.getConstructor().newInstance()</code>.
        /// 
        /// </summary>
        /// <param name="t">the <code>Throwable</code>
        /// </param>
        public static void handleNewInstanceFailure(Exception t, Type c)
        {
        }
		
		private static void handle(Exception t, String className, params Type[] exceptionTypes)
        {
            //// find and rethrow causes which are not bugs
            //ThrowableUtils.throwRecent(typeof(System.OutOfMemoryException), t);

            //// always a bug if the class was from the VassalSharp.* hiearchy
            //if (className.StartsWith("VassalSharp.")) {
            //    ErrorDialog.bug(t);
            //    return;
            //}

            //// these errors are expected from custom classes
            ////UPGRADE_ISSUE: The following fragment of code could not be parsed and was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1156'"
            //foreach (Exception cl in exceptionTypes) {
            //    if (t.GetType().IsAssignableFrom(cl)) {
            //        ErrorDialog.showDetailsDisableable(t, ThrowableUtils.getStackTrace(t), className, "Error.custom_class_error", className);
            //        return;
            //    }
            //}

            //// otherwise something weird happened
            //if (t is System.ApplicationException) {
            //    // some unusual problem occurred
            //    throw (System.ApplicationException)t;
            //}
            //else if (t is System.SystemException) {
            //    // some unusual problem occurred
            //    throw (System.SystemException)t;
            //}
            //else {
            //    // this should never happen
            //    throw new IllegalStateException(t);
            //}
        }
    }
}