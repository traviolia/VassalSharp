/*
* $Id$
*
* Copyright (c) 2008-2009 by Brent Easton
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Library General Public
* License (LGPL) as published by the Free Software Foundation.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Library General Public License for more details.
*
* You should have received a copy of the GNU Library General Public
* License along with this library; if not, copies are available
* at http://www.opensource.org.
*/
using System;
using System.Collections.Generic;

namespace VassalSharp.tools
{
	
	public class NamedKeyManager
	{
		public static NamedKeyManager Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new NamedKeyManager();
				}
				return instance;
			}
			
		}
		/// <summary> Return a generic marker KeyStroke</summary>
		/// <returns>
		/// </returns>
		public static KeyStroke MarkerKeyStroke
		{
			get
			{
				return new KeyStroke(NAMED_MARKER | 0);
			}
			
		}
		/// <summary> Return the next KeyStroke from the pool</summary>
		/// <returns> KeyStroke Id
		/// </returns>
		virtual public int NextStroke
		{
			get
			{
				if (nextNamedKey == NAMED_END)
				{
					throw new System.SystemException("Too many Named Keys");
				}
				return nextNamedKey++;
			}
			
		}
		
		protected internal static NamedKeyManager instance;
		
		/*
		* Named Keys are allocated real Keystrokes
		* in the sequence from '\uE000' to '\uF8FE'.
		* The value '\uF8FF' is used as a place marker to
		* indicate a real KeyStroke has not been allocated yet.
		*/
		protected internal const int NAMED_START = '\uE000';
		protected internal const int NAMED_END = '\uF8FE';
		protected internal const int NAMED_MARKER = '\uF8FF';
		
		protected internal static int nextNamedKey = NAMED_START;
		//UPGRADE_ISSUE: The following fragment of code could not be parsed and was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1156'"
		protected static Dictionary < String, KeyStroke > strokes = new Dictionary < String, KeyStroke >();
		
		public NamedKeyManager()
		{
		}
		
		/// <summary> Return true if the supplied KeyStroke is in the range allocated
		/// to NamedKeyStrokes
		/// </summary>
		/// <param name="k">KeyStroke
		/// </param>
		/// <returns> true if this was generated by us
		/// </returns>
		public static bool isNamed(System.Windows.Forms.KeyEventArgs k)
		{
			if (k == null)
			{
				return false;
			}
			int code = k.KeyValue;
			return code == NAMED_MARKER || (code >= NAMED_START && code <= NAMED_END);
		}
		
		/// <summary> Return the generated KeyStroke associated with the NamedKeyStroke</summary>
		/// <param name="vkey">
		/// </param>
		/// <returns> generated KeyStroke
		/// </returns>
		public virtual KeyStroke getKeyStroke(NamedKeyStroke vkey)
		{
			// No name means it is just a standard keystroke
			if (!vkey.Named)
			{
				return vkey.Stroke;
			}
			
			// Look up the name in the cache and allocate the next
			// available KeyStroke if required.
			KeyStroke stroke = strokes[vkey.Name];
			if (stroke == null)
			{
				stroke = new KeyStroke();
				strokes.Add(vkey.Name, stroke);
			}
			
			return stroke;
		}
	}
}